{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_my_template = _resolveComponent(\"my-template\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_my_template), _createCommentVNode(\" Le reste de votre code HTML ici \")]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_my_template","_createCommentVNode"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import { subjects } from \"@/data\";\n\n<template>\n  <div>\n    <my-template></my-template>\n    <!-- Le reste de votre code HTML ici -->\n  </div>\n</template>\n\n\n\n<script>\n\nimport MyTemplate from './MyTemplate.vue';\n\nexport default {\n\n  components: {\n          MyTemplate // Utilisez directement le nom du composant sans guillemets ou apostrophes\n       },\n  \n  data() {\n    return {\n      selectedLanguage: 'fr-FR', // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60, // Temps limite en secondes\n      timeRemaining: 0,\n      \n      \n      subjects: [\n        {\n          title: \"Sujet 1\",\n          difficulty: \"facile\",\n          text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe. Ainsi il le faut vraiment pour un language meilleur.\"\n        },\n        {\n          title: \"Sujet 2\",\n          difficulty: \"moyen\",\n          text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n        },\n        {\n          title: \"Sujet 3\",\n          difficulty: \"difficile\",\n          text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n },\n    ],\n    selectedDifficulty: \"\",\n    selectedSubject: null,\n    isDictationStarted: false,\n    currentText: \"\",\n    userInput: \"\"\n    };\n    \n    },\n\n    computed: {\n    filteredSubjects() {\n    if (this.selectedDifficulty) {\n    return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n    } else {\n    return this.subjects;\n    }\n    }\n    },\n      methods: {\n      createSubject() {\n      const newSubject = {\n      title: \"Nouveau sujet\",\n      difficulty: \"\",\n      text: \"\", \n      };\n      this.subjects.push(newSubject);\n      this.selectedSubject = newSubject;\n      },\n      updateSubject() {\n      // Implémentez la logique pour mettre à jour le sujet sélectionné\n      },\n      deleteSubject() {\n      // Implémentez la logique pour supprimer le sujet sélectionné\n      },\n      startDictation() {\n      this.currentRepetition = 1;\n      this.timeRemaining = this.timeLimit;\n      this.timer = setInterval(() => {\n      if (this.timeRemaining > 0) {\n      this.timeRemaining--;\n      } else {\n      clearInterval(this.timer);\n      this.checkAnswer();\n      }\n      }, 1000);\n      this.isDictationStarted = true;\n      this.currentText = this.selectedSubject.text;\n      },\n     speakText(text, repetitions) {\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.lang = this.selectedLanguage;\n\n  utterance.onend = () => {\n    if (repetitions > 1) {\n      this.speakText(text, repetitions - 1);\n    } else {\n      // Vérifiez si toutes les phrases ont été lues\n      const sentences = text.split('.'); // Diviser le texte en phrases en utilisant le point comme séparateur\n      const currentIndex = sentences.findIndex(sentence => sentence.trim() === text.trim());\n\n      if (currentIndex === sentences.length - 1) {\n        this.speakGeneralRepeat();\n      }\n    }\n  };\n\n    speechSynthesis.speak(utterance);\n  },\n\n   speakGeneralRepeat() {\n    const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n    const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n\n    this.speakText(fullText, repetitions);\n   },\n\n      checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n        if (userAnswer === expectedAnswer) {\n          alert(\"Bonne réponse !\");\n        } else {\n          alert(\"Mauvaise réponse. Réessayez !\");\n        }\n\n        if (this.currentRepetition < this.maxRepetitions) {\n          this.currentRepetition++;\n          this.isDictationStarted = true;\n        } else {\n          // ...\n        }\n\n        // Réinitialiser les valeurs\n        this.isDictationStarted = false;\n        this.currentText = \"\";\n        this.userInput = \"\";\n      }\n      }\n      };\n</script>\n<style>\n  /* Importer votre fichier CSS externe */\n  @import './hello-world.css';\n</style>\n"],"mappings":";;;uBAGEA,mBAAA,CAGM,cAFJC,YAAA,CAA2BC,sBAAA,GAC3BC,mBAAA,qCAAwC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}