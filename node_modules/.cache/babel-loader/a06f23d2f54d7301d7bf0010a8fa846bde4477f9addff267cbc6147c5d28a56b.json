{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"test-dictation\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Test de dictée\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"difficulty\"\n}, \"Niveau de difficulté :\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"facile\"\n}, \"Facile\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"moyen\"\n}, \"Moyen\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"difficile\"\n}, \"Difficile\", -1 /* HOISTED */);\nconst _hoisted_7 = [_hoisted_4, _hoisted_5, _hoisted_6];\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"language\"\n}, \"Langue :\", -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"en-US\"\n}, \"English\", -1 /* HOISTED */);\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"fr-FR\"\n}, \"Français\", -1 /* HOISTED */);\nconst _hoisted_11 = {\n  key: 0\n};\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"subject\"\n}, \"Sujet :\", -1 /* HOISTED */);\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n}, \"Sélectionnez un sujet\", -1 /* HOISTED */);\nconst _hoisted_14 = [\"value\"];\nconst _hoisted_15 = {\n  class: \"subject-actions\"\n};\nconst _hoisted_16 = {\n  key: 1\n};\nconst _hoisted_17 = {\n  key: 0\n};\nconst _hoisted_18 = {\n  for: \"repetitionsEnabled\"\n};\nconst _hoisted_19 = [\"onUpdate:modelValue\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"h1\", null, _toDisplayString(_ctx.$t(\"BONJOUR ET BIENVENUE\")), 1 /* TEXT */), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"select\", {\n    id: \"difficulty\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedDifficulty = $event)\n  }, _hoisted_7, 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedDifficulty]])]), _createElementVNode(\"div\", null, [_hoisted_8, _withDirectives(_createElementVNode(\"select\", {\n    id: \"language\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedLanguage = $event)\n  }, [_hoisted_9, _hoisted_10, _createCommentVNode(\" Ajoutez d'autres options pour les autres langues si nécessaire \")], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedLanguage]])]), _ctx.filteredSubjects.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_hoisted_12, _withDirectives(_createElementVNode(\"select\", {\n    id: \"subject\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectedSubject = $event)\n  }, [_hoisted_13, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject.title,\n      value: subject\n    }, _toDisplayString(subject.title), 9 /* TEXT, PROPS */, _hoisted_14);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedSubject]]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.createSubject && _ctx.createSubject(...args))\n  }, \"Nouveau sujet\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.updateSubject && _ctx.updateSubject(...args))\n  }, \"Mettre à jour\"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.deleteSubject && _ctx.deleteSubject(...args))\n  }, \"Supprimer\")])])) : _createCommentVNode(\"v-if\", true), _ctx.selectedSubject ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"h2\", null, _toDisplayString(_ctx.selectedSubject.title), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.startDictation && _ctx.startDictation(...args))\n  }, \"Commencer la dictée\"), _ctx.isDictationStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.currentText), 1 /* TEXT */), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.userInput = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => _ctx.checkAnswer && _ctx.checkAnswer(...args))\n  }, \"Vérifier\"), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = $event => _ctx.speakText(_ctx.selectedSubject.text))\n  }, \"Lire le texte\"), _createElementVNode(\"label\", _hoisted_18, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"repetitionsEnabled\",\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => _ctx.repetitionsEnabled = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, _ctx.repetitionsEnabled]]), _createTextVNode(\" Répéter les phrases \")]), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Temps restant : \" + _toDisplayString(_ctx.timeRemaining) + \"s\", 1 /* TEXT */)]), _createElementVNode(\"h2\", null, _toDisplayString(_ctx.selectedSubject.title), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = (...args) => _ctx.startDictation && _ctx.startDictation(...args))\n  }, _toDisplayString(_ctx.$t(\"startDictation\")), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedSubject.phrases, phrase => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: phrase.text\n    }, [_createElementVNode(\"p\", null, _toDisplayString(phrase.text), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      \"onUpdate:modelValue\": $event => phrase.repetitions = $event,\n      min: \"1\"\n    }, null, 8 /* PROPS */, _hoisted_19), [[_vModelText, phrase.repetitions]])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = (...args) => _ctx.startGeneralRepeat && _ctx.startGeneralRepeat(...args))\n  }, _toDisplayString(_ctx.$t(\"startGeneralRepeat\")), 1 /* TEXT */), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Répétitions restantes : \" + _toDisplayString(_ctx.maxRepetitions - _ctx.currentRepetition), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","value","_hoisted_4","_hoisted_5","_hoisted_6","disabled","selected","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","_ctx","$t","_hoisted_3","id","selectedDifficulty","$event","_hoisted_8","selectedLanguage","_hoisted_9","_hoisted_10","_createCommentVNode","filteredSubjects","length","_hoisted_11","_hoisted_12","selectedSubject","_hoisted_13","_Fragment","_renderList","subject","key","title","_hoisted_14","_hoisted_15","onClick","_cache","args","createSubject","updateSubject","deleteSubject","_hoisted_16","startDictation","isDictationStarted","_hoisted_17","currentText","userInput","checkAnswer","speakText","text","_hoisted_18","type","repetitionsEnabled","timeRemaining","phrases","phrase","repetitions","min","startGeneralRepeat","maxRepetitions","currentRepetition"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import { subjects } from \"@/data\";\n\n<template>\n  <div class=\"test-dictation\">\n    <h1>Test de dictée</h1>\n    <h1>{{ $t(\"BONJOUR ET BIENVENUE\") }}</h1>\n    <div>\n      <label for=\"difficulty\">Niveau de difficulté :</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"facile\">Facile</option>\n        <option value=\"moyen\">Moyen</option>\n        <option value=\"difficile\">Difficile</option>\n      </select>\n    </div>\n\n    <div>\n      <label for=\"language\">Langue :</label>\n      <select id=\"language\" v-model=\"selectedLanguage\">\n        <option value=\"en-US\">English</option>\n        <option value=\"fr-FR\">Français</option>\n        <!-- Ajoutez d'autres options pour les autres langues si nécessaire -->\n      </select>\n    </div>\n\n    <div v-if=\"filteredSubjects.length > 0\">\n      <label for=\"subject\">Sujet :</label>\n      <select id=\"subject\" v-model=\"selectedSubject\">\n        <option value=\"\" disabled selected>Sélectionnez un sujet</option>\n        <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n      </select>\n\n      <div class=\"subject-actions\">\n        <button @click=\"createSubject\">Nouveau sujet</button>\n        <button @click=\"updateSubject\">Mettre à jour</button>\n        <button @click=\"deleteSubject\">Supprimer</button>\n      </div>\n    </div>\n\n    <div v-if=\"selectedSubject\">\n      <h2>{{ selectedSubject.title }}</h2>\n      <button @click=\"startDictation\">Commencer la dictée</button>\n\n      <div v-if=\"isDictationStarted\">\n        <p>{{ currentText }}</p>\n        <textarea v-model=\"userInput\"></textarea>\n        <button @click=\"checkAnswer\">Vérifier</button>\n        <button @click=\"speakText(selectedSubject.text)\">Lire le texte</button>\n\n        <label for=\"repetitionsEnabled\">\n          <input\n            id=\"repetitionsEnabled\"\n            type=\"checkbox\"\n            v-model=\"repetitionsEnabled\"\n          >\n          Répéter les phrases\n        </label>\n\n        <div>\n          <p>Temps restant : {{ timeRemaining }}s</p>\n        </div>\n        \n        <h2>{{ selectedSubject.title }}</h2>\n        <button @click=\"startDictation\">{{ $t(\"startDictation\") }}</button>\n        <div v-for=\"phrase in selectedSubject.phrases\" :key=\"phrase.text\">\n           <p>{{ phrase.text }}</p>\n           <input type=\"number\" v-model=\"phrase.repetitions\" min=\"1\">\n        </div>\n        <button @click=\"startGeneralRepeat\">{{ $t(\"startGeneralRepeat\") }}</button>\n\n        <div>\n          <p>Répétitions restantes : {{ maxRepetitions - currentRepetition }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n\n  data() {\n\n    return {\n      selectedLanguage: 'fr-FR', // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60, // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n\n      subjects: [\n        {\n          title: \"Sujet 1\",\n          difficulty: \"facile\",\n          text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe. Ainsi il le faut vraiment pour un language meilleur.\"\n        },\n\n        {\n          title: \"Sujet 2\",\n          difficulty: \"moyen\",\n          text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n        },\n\n        {\n          title: \"Sujet 3\",\n          difficulty: \"difficile\",\n          text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n        },\n      ],\n        selectedDifficulty: \"\",\n        selectedSubject: null,\n        isDictationStarted: false,\n        currentText: \"\",\n        userInput: \"\"\n    };\n  },\n\n    computed: {\n      filteredSubjects() {\n      if (this.selectedDifficulty) {\n      return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n      } *else {\n      return this.subjects;\n      }\n    }\n    },\n      methods: {\n      createSubject() {\n      const newSubject = {\n      title: \"Nouveau sujet\",\n      difficulty: \"\",\n      text: \"\", \n      };\n      this.subjects.push(newSubject);\n      this.selectedSubject = newSubject;\n      },\n      updateSubject() {\n      // Implémentez la logique pour mettre à jour le sujet sélectionné\n      },\n      deleteSubject() {\n      // Implémentez la logique pour supprimer le sujet sélectionné\n      },\n\n\n   startDictation() {\n  this.currentRepetition = 1;\n  this.timeRemaining = this.timeLimit;\n  this.timer = setInterval(() => {\n    if (this.timeRemaining > 0) {\n      this.timeRemaining--;\n    } else {\n      clearInterval(this.timer);\n      this.checkAnswer();\n    }\n  }, 1000);\n  \n  this.isDictationStarted = true;\n  this.currentText = this.selectedSubject.text; // Modifier ici pour utiliser la variable correcte\n  this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, this.repetitionsEnabled); // Modifier ici pour utiliser la variable correcte\n},\n\n\n\n\n     speakText(text, repetitions, repetitionsEnabled) {\n      const sentences = text.split('.'); // Diviser le texte en phrases en utilisant le point comme séparateur\n      let currentIndex = 0;\n      const speakSentence = () => {\n        const sentence = sentences[currentIndex].trim();\n        const utterance = new SpeechSynthesisUtterance(sentence);\n        utterance.lang = this.selectedLanguage;\n\n      utterance.onend = () => {\n      if (repetitionsEnabled && repetitions > 1) {\n        repetitions--;\n        this.speakText(text, repetitions - 1, repetitionsEnabled);\n      } else if (currentIndex === sentences.length - 1) {\n        this.speakGeneralRepeat();\n      } else {\n        currentIndex++;\n        speakSentence();\n      }\n    };\n\n    speechSynthesis.speak(utterance);\n  };\n\n  speakSentence();\n},\n\nspeakGeneralRepeat() {\n  const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n  const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n\n  this.speakText(fullText, repetitions);\n},\n\n      checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n        if (userAnswer === expectedAnswer) {\n          alert(\"Bonne réponse !\");\n        } else {\n          alert(\"Mauvaise réponse. Réessayez !\");\n        }\n\n        if (this.currentRepetition < this.maxRepetitions) {\n          this.currentRepetition++;\n          this.isDictationStarted = true;\n        } else {\n          // ...\n        }\n\n        // Réinitialiser les valeurs\n        this.isDictationStarted = false;\n        this.currentText = \"\";\n        this.userInput = \"\";\n      }\n      }\n      };\n</script>\n<style>\n  /* Importer votre fichier CSS externe */\n  @import './hello-world.css';\n</style>\n"],"mappings":";;EAGOA,KAAK,EAAC;AAAgB;gCACzBC,mBAAA,CAAuB,YAAnB,gBAAc;gCAGhBA,mBAAA,CAAsD;EAA/CC,GAAG,EAAC;AAAY,GAAC,wBAAsB;gCAE5CD,mBAAA,CAAsC;EAA9BE,KAAK,EAAC;AAAQ,GAAC,QAAM;gCAC7BF,mBAAA,CAAoC;EAA5BE,KAAK,EAAC;AAAO,GAAC,OAAK;gCAC3BF,mBAAA,CAA4C;EAApCE,KAAK,EAAC;AAAW,GAAC,WAAS;oBAFnCC,UAAsC,EACtCC,UAAoC,EACpCC,UAA4C,C;gCAK9CL,mBAAA,CAAsC;EAA/BC,GAAG,EAAC;AAAU,GAAC,UAAQ;gCAE5BD,mBAAA,CAAsC;EAA9BE,KAAK,EAAC;AAAO,GAAC,SAAO;iCAC7BF,mBAAA,CAAuC;EAA/BE,KAAK,EAAC;AAAO,GAAC,UAAQ;;;;iCAMhCF,mBAAA,CAAoC;EAA7BC,GAAG,EAAC;AAAS,GAAC,SAAO;iCAE1BD,mBAAA,CAAiE;EAAzDE,KAAK,EAAC,EAAE;EAACI,QAAQ,EAAR,EAAQ;EAACC,QAAQ,EAAR;GAAS,uBAAqB;;;EAIrDR,KAAK,EAAC;AAAiB;;;;;;;;EAiBnBE,GAAG,EAAC;AAAoB;;;uBA7CrCO,mBAAA,CAuEM,OAvENC,UAuEM,GAtEJC,UAAuB,EACvBV,mBAAA,CAAyC,YAAAW,gBAAA,CAAlCC,IAAA,CAAAC,EAAE,0CACTb,mBAAA,CAOM,cANJc,UAAsD,E,gBACtDd,mBAAA,CAIS;IAJDe,EAAE,EAAC,YAAY;+DAAUH,IAAA,CAAAI,kBAAkB,GAAAC,MAAA;yDAAlBL,IAAA,CAAAI,kBAAkB,E,KAOrDhB,mBAAA,CAOM,cANJkB,UAAsC,E,gBACtClB,mBAAA,CAIS;IAJDe,EAAE,EAAC,UAAU;+DAAUH,IAAA,CAAAO,gBAAgB,GAAAF,MAAA;MAC7CG,UAAsC,EACtCC,WAAuC,EACvCC,mBAAA,oEAAuE,C,0CAH1CV,IAAA,CAAAO,gBAAgB,E,KAOtCP,IAAA,CAAAW,gBAAgB,CAACC,MAAM,Q,cAAlChB,mBAAA,CAYM,OAAAiB,WAAA,GAXJC,WAAoC,E,gBACpC1B,mBAAA,CAGS;IAHDe,EAAE,EAAC,SAAS;+DAAUH,IAAA,CAAAe,eAAe,GAAAV,MAAA;MAC3CW,WAAiE,G,kBACjEpB,mBAAA,CAA8GqB,SAAA,QAAAC,WAAA,CAApFlB,IAAA,CAAAW,gBAAgB,EAA3BQ,OAAO;yBAAtBvB,mBAAA,CAA8G;MAAjEwB,GAAG,EAAED,OAAO,CAACE,KAAK;MAAG/B,KAAK,EAAE6B;wBAAYA,OAAO,CAACE,KAAK,wBAAAC,WAAA;2EAFtEtB,IAAA,CAAAe,eAAe,E,GAK7C3B,mBAAA,CAIM,OAJNmC,WAIM,GAHJnC,mBAAA,CAAqD;IAA5CoC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE1B,IAAA,CAAA2B,aAAA,IAAA3B,IAAA,CAAA2B,aAAA,IAAAD,IAAA,CAAa;KAAE,eAAa,GAC5CtC,mBAAA,CAAqD;IAA5CoC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE1B,IAAA,CAAA4B,aAAA,IAAA5B,IAAA,CAAA4B,aAAA,IAAAF,IAAA,CAAa;KAAE,eAAa,GAC5CtC,mBAAA,CAAiD;IAAxCoC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE1B,IAAA,CAAA6B,aAAA,IAAA7B,IAAA,CAAA6B,aAAA,IAAAH,IAAA,CAAa;KAAE,WAAS,E,0CAIjC1B,IAAA,CAAAe,eAAe,I,cAA1BnB,mBAAA,CAmCM,OAAAkC,WAAA,GAlCJ1C,mBAAA,CAAoC,YAAAW,gBAAA,CAA7BC,IAAA,CAAAe,eAAe,CAACM,KAAK,kBAC5BjC,mBAAA,CAA4D;IAAnDoC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE1B,IAAA,CAAA+B,cAAA,IAAA/B,IAAA,CAAA+B,cAAA,IAAAL,IAAA,CAAc;KAAE,qBAAmB,GAExC1B,IAAA,CAAAgC,kBAAkB,I,cAA7BpC,mBAAA,CA8BM,OAAAqC,WAAA,GA7BJ7C,mBAAA,CAAwB,WAAAW,gBAAA,CAAlBC,IAAA,CAAAkC,WAAW,kB,gBACjB9C,mBAAA,CAAyC;+DAAtBY,IAAA,CAAAmC,SAAS,GAAA9B,MAAA;iDAATL,IAAA,CAAAmC,SAAS,E,GAC5B/C,mBAAA,CAA8C;IAArCoC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE1B,IAAA,CAAAoC,WAAA,IAAApC,IAAA,CAAAoC,WAAA,IAAAV,IAAA,CAAW;KAAE,UAAQ,GACrCtC,mBAAA,CAAuE;IAA9DoC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAApB,MAAA,IAAEL,IAAA,CAAAqC,SAAS,CAACrC,IAAA,CAAAe,eAAe,CAACuB,IAAI;KAAG,eAAa,GAE9DlD,mBAAA,CAOQ,SAPRmD,WAOQ,G,gBANNnD,mBAAA,CAIC;IAHCe,EAAE,EAAC,oBAAoB;IACvBqC,IAAI,EAAC,UAAU;iEACNxC,IAAA,CAAAyC,kBAAkB,GAAApC,MAAA;qDAAlBL,IAAA,CAAAyC,kBAAkB,E,oBAC5B,uBAEH,E,GAEArD,mBAAA,CAEM,cADJA,mBAAA,CAA2C,WAAxC,kBAAgB,GAAAW,gBAAA,CAAGC,IAAA,CAAA0C,aAAa,IAAG,GAAC,gB,GAGzCtD,mBAAA,CAAoC,YAAAW,gBAAA,CAA7BC,IAAA,CAAAe,eAAe,CAACM,KAAK,kBAC5BjC,mBAAA,CAAmE;IAA1DoC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAE1B,IAAA,CAAA+B,cAAA,IAAA/B,IAAA,CAAA+B,cAAA,IAAAL,IAAA,CAAc;sBAAK1B,IAAA,CAAAC,EAAE,qC,kBACrCL,mBAAA,CAGMqB,SAAA,QAAAC,WAAA,CAHgBlB,IAAA,CAAAe,eAAe,CAAC4B,OAAO,EAAjCC,MAAM;yBAAlBhD,mBAAA,CAGM;MAH0CwB,GAAG,EAAEwB,MAAM,CAACN;QACzDlD,mBAAA,CAAwB,WAAAW,gBAAA,CAAlB6C,MAAM,CAACN,IAAI,kB,gBACjBlD,mBAAA,CAA0D;MAAnDoD,IAAI,EAAC,QAAQ;uCAAUI,MAAM,CAACC,WAAW,GAAAxC,MAAA;MAAEyC,GAAG,EAAC;yDAAxBF,MAAM,CAACC,WAAW,E;kCAEnDzD,mBAAA,CAA2E;IAAlEoC,OAAK,EAAAC,MAAA,SAAAA,MAAA,WAAAC,IAAA,KAAE1B,IAAA,CAAA+C,kBAAA,IAAA/C,IAAA,CAAA+C,kBAAA,IAAArB,IAAA,CAAkB;sBAAK1B,IAAA,CAAAC,EAAE,wCAEzCb,mBAAA,CAEM,cADJA,mBAAA,CAAuE,WAApE,0BAAwB,GAAAW,gBAAA,CAAGC,IAAA,CAAAgD,cAAc,GAAGhD,IAAA,CAAAiD,iBAAiB,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}