{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, vModelText as _vModelText, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"test-dictation\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  for: \"difficulty\"\n};\nconst _hoisted_4 = {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n};\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  for: \"subject\"\n};\nconst _hoisted_7 = {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n};\nconst _hoisted_8 = [\"value\"];\nconst _hoisted_9 = {\n  class: \"subject-actions\"\n};\nconst _hoisted_10 = {\n  key: 1\n};\nconst _hoisted_11 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, _toDisplayString(_ctx.$t(\"welcome\")), 1 /* TEXT */), $options.filteredSubjects.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"label\", _hoisted_3, _toDisplayString(_ctx.$t(\"difficulty\")) + \":\", 1 /* TEXT */), _withDirectives(_createElementVNode(\"select\", {\n    id: \"difficulty\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedDifficulty = $event)\n  }, [_createElementVNode(\"option\", _hoisted_4, _toDisplayString(_ctx.$t(\"difficulty\")), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.difficulties, difficulty => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: difficulty,\n      value: difficulty\n    }, _toDisplayString(difficulty), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedDifficulty]]), _createElementVNode(\"label\", _hoisted_6, _toDisplayString(_ctx.$t(\"subject\")) + \":\", 1 /* TEXT */), _withDirectives(_createElementVNode(\"select\", {\n    id: \"subject\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedSubject = $event)\n  }, [_createElementVNode(\"option\", _hoisted_7, _toDisplayString(_ctx.$t(\"subject\")), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject.title,\n      value: subject\n    }, _toDisplayString(subject.title), 9 /* TEXT, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedSubject]]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.createSubject && $options.createSubject(...args))\n  }, _toDisplayString(_ctx.$t(\"newSubject\")), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.updateSubject && $options.updateSubject(...args))\n  }, _toDisplayString(_ctx.$t(\"update\")), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.deleteSubject && $options.deleteSubject(...args))\n  }, _toDisplayString(_ctx.$t(\"delete\")), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true), $data.isDictationStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"h2\", null, _toDisplayString($data.selectedSubject.title), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.startDictation && $options.startDictation(...args))\n  }, _toDisplayString(_ctx.$t(\"startDictation\")), 1 /* TEXT */), $data.isDictationStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createElementVNode(\"p\", null, _toDisplayString($data.selectedSubject.text), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.$t(\"remainingTime\", {\n    time: $data.timeRemaining\n  })), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.$t(\"remainingRepetitions\", {\n    repetitions: $data.maxRepetitions - $data.currentRepetition\n  })), 1 /* TEXT */), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.userAnswer = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.userAnswer]]), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.checkAnswer && $options.checkAnswer(...args))\n  }, _toDisplayString(_ctx.$t(\"checkAnswer\")), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","for","value","disabled","selected","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","_ctx","$t","$options","filteredSubjects","length","_hoisted_2","_hoisted_3","id","$data","selectedDifficulty","$event","_hoisted_4","_Fragment","_renderList","difficulties","difficulty","key","_hoisted_5","_hoisted_6","selectedSubject","_hoisted_7","subject","title","_hoisted_8","_hoisted_9","onClick","_cache","args","createSubject","updateSubject","deleteSubject","isDictationStarted","_hoisted_10","startDictation","_hoisted_11","text","time","timeRemaining","repetitions","maxRepetitions","currentRepetition","userAnswer","checkAnswer"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import VueSpeech from \"vue-speech\";\n<template>\n  <div class=\"test-dictation\">\n    <h1>{{ $t(\"welcome\") }}</h1>\n    <div v-if=\"filteredSubjects.length > 0\">\n      <label for=\"difficulty\">{{ $t(\"difficulty\") }}:</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"\" disabled selected>{{ $t(\"difficulty\") }}</option>\n        <option v-for=\"difficulty in difficulties\" :key=\"difficulty\" :value=\"difficulty\">{{ difficulty }}</option>\n      </select>\n\n      <label for=\"subject\">{{ $t(\"subject\") }}:</label>\n      <select id=\"subject\" v-model=\"selectedSubject\">\n        <option value=\"\" disabled selected>{{ $t(\"subject\") }}</option>\n        <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n      </select>\n\n      <div class=\"subject-actions\">\n        <button @click=\"createSubject\">{{ $t(\"newSubject\") }}</button>\n        <button @click=\"updateSubject\">{{ $t(\"update\") }}</button>\n        <button @click=\"deleteSubject\">{{ $t(\"delete\") }}</button>\n      </div>\n    </div>\n\n    <div v-if=\"isDictationStarted\">\n      <h2>{{ selectedSubject.title }}</h2>\n      <button @click=\"startDictation\">{{ $t(\"startDictation\") }}</button>\n      <div v-if=\"isDictationStarted\">\n        <p>{{ selectedSubject.text }}</p>\n        <p>{{ $t(\"remainingTime\", { time: timeRemaining }) }}</p>\n        <p>{{ $t(\"remainingRepetitions\", { repetitions: maxRepetitions - currentRepetition }) }}</p>\n        <textarea v-model=\"userAnswer\"></textarea>\n        <button @click=\"checkAnswer\">{{ $t(\"checkAnswer\") }}</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\n\nexport default {\n  data() {\n  return {\n    maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n    currentRepetition: 1,\n    timer: null,\n    timeLimit: 60, // Temps limite en secondes\n    timeRemaining: 0,\n\n    subjects: [\n      {\n        title: \"Sujet 1\",\n        difficulty: \"facile\",\n        text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe.\"\n      },\n      {\n        title: \"Sujet 2\",\n        difficulty: \"moyen\",\n        text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n      },\n      {\n        title: \"Sujet 3\",\n        difficulty: \"difficile\",\n        text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n      }\n    ],\n    selectedDifficulty: \"\",\n    selectedSubject: null,\n    isDictationStarted: false,\n    currentText: \"\",\n    userInput: \"\"\n  };\n},\ncomputed: {\n  filteredSubjects() {\n    if (this.selectedDifficulty) {\n      return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n    } else {\n      return this.subjects;\n    }\n  }\n},\n\n  methods: {\n\n     createSubject() {\n    const newSubject = {\n      title: \"Nouveau sujet\",\n      difficulty: \"\",\n      text: \"\"\n    }\n    this.subjects.push(newSubject);\n    this.selectedSubject = newSubject;\n  },\n\n  updateSubject() {\n    // Implémentez la logique pour mettre à jour le sujet sélectionné\n  },\n\n  deleteSubject() {\n    // Implémentez la logique pour supprimer le sujet sélectionné\n  },\n\n    startDictation() {\n       this.currentRepetition = 1;\n      this.timeRemaining = this.timeLimit;\n    this.timer = setInterval(() => {\n      if (this.timeRemaining > 0) {\n        this.timeRemaining--;\n      } else {\n        clearInterval(this.timer);\n        this.checkAnswer();\n      }\n    }, 1000)\n      this.isDictationStarted = true;\n      this.currentText = this.selectedSubject.text;\n    },\n    speakText() {\n      const textToSpeak = this.selectedSubject.text;\n      this.$speech.say(textToSpeak);\n    },\n    checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n\n      if (userAnswer === expectedAnswer) {\n        alert(\"Bonne réponse !\");\n      } else {\n        alert(\"Mauvaise réponse. Réessayez !\");\n      }\n      if (userAnswer === expectedAnswer) {\n      // ...\n      if (this.currentRepetition < this.maxRepetitions) {\n        this.currentRepetition++;\n        this.isDictationStarted = true;\n      } else {\n        // ...\n      }\n    }\n\n      // Réinitialiser les valeurs\n      this.isDictationStarted = false;\n      this.currentText = \"\";\n      this.userInput = \"\";\n    }\n  }\n}\n\n\n</script>\n<style scoped>\n.test-dictation {\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1, h2 {\n  text-align: center;\n}\n\nselect, button {\n  margin-bottom: 10px;\n}\n\ntextarea {\n  width: 100%;\n  height: 100px;\n  margin-bottom: 10px;\n}\n\n/* ... */\n.timer {\n  text-align: center;\n}\n\n.repetitions {\n  text-align: center;\n}\n</style>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}