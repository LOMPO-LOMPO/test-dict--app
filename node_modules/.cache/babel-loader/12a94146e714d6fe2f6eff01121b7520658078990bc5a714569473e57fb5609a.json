{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedLanguage: 'fr-FR',\n      // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3,\n      // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60,\n      // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n      isCreatingNewSubject: false,\n      newSubject: {\n        title: \"\",\n        text: \"\",\n        selectedIndex: null\n      },\n      subjects: [{\n        title: \"Sujet 1\",\n        difficulty: \"facile\",\n        text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe. Ainsi il le faut vraiment pour un language meilleur.\"\n      }, {\n        title: \"Sujet 2\",\n        difficulty: \"moyen\",\n        text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n      }, {\n        title: \"Sujet 3\",\n        difficulty: \"difficile\",\n        text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n      }],\n      selectedDifficulty: \"\",\n      selectedSubject: null,\n      isDictationStarted: false,\n      currentText: \"\",\n      userInput: \"\"\n    };\n  },\n  computed: {\n    filteredSubjects() {\n      if (this.selectedDifficulty) {\n        return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n      } else {\n        return this.subjects;\n      }\n    }\n  },\n  methods: {\n    createSubject() {\n      const newSubject = {\n        title: \"Nouveau sujet\",\n        difficulty: \"\",\n        text: \"\"\n      };\n      this.isCreatingNewSubject = true;\n      this.newSubject = {\n        title: \"\",\n        text: \"\"\n      };\n      this.subjects.push(newSubject);\n      this.selectedSubject = newSubject;\n    },\n    updateSubject() {\n      // Implémentez la logique pour mettre à jour le sujet sélectionné\n    },\n    deleteSubject() {\n      if (this.selectedIndex !== null) {\n        const confirmed = confirm(\"Êtes-vous sûr de vouloir supprimer ce sujet ?\");\n        if (confirmed) {\n          this.subjects.splice(this.selectedIndex, 1);\n          this.selectedIndex = null;\n        }\n      }\n    },\n    selectSubject(index) {\n      this.selectedIndex = index;\n    },\n    cancelDelete() {\n      this.selectedIndex = null;\n    },\n    cancelDelete() {\n      this.selectedIndex = null;\n    },\n    cancelNewSubject() {\n      this.isCreatingNewSubject = false;\n      this.newSubject = null;\n    },\n    saveNewSubject() {\n      // Génère un ID et un numéro pour le nouveau sujet\n      const newId = this.subjects.length > 0 ? this.subjects[this.subjects.length - 1].id + 1 : 1;\n      const newNumber = this.subjects.length + 1;\n\n      // Crée le nouvel objet sujet\n      const newSubject = {\n        id: newId,\n        number: newNumber,\n        title: this.newSubject.title,\n        difficulty: \"\",\n        // Définir la difficulté selon les besoins\n        text: this.newSubject.text\n      };\n\n      // Ajoute le sujet au tableau\n      this.subjects.push(newSubject);\n\n      // Réinitialise les valeurs pour le prochain nouveau sujet\n      this.newSubject.title = \"\";\n      this.newSubject.text = \"\";\n\n      // Sélectionne le nouveau sujet créé\n      this.selectedSubject = newSubject;\n\n      // Désactive le mode de création de nouveau sujet\n      this.isCreatingNewSubject = false;\n    },\n    startDictation() {\n      this.currentRepetition = 1;\n      this.timeRemaining = this.timeLimit;\n      this.timer = setInterval(() => {\n        if (this.timeRemaining > 0) {\n          this.timeRemaining--;\n        } else {\n          clearInterval(this.timer);\n          this.checkAnswer();\n        }\n      }, 1000);\n      this.isDictationStarted = true;\n      this.currentText = this.selectedSubject.text; // Modifier ici pour utiliser la variable correcte\n      this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, this.repetitionsEnabled); // Modifier ici pour utiliser la variable correcte\n    },\n\n    speakText(text, repetitions, repetitionsEnabled) {\n      const sentences = text.split('.'); // Diviser le texte en phrases en utilisant le point comme séparateur\n      let currentIndex = 0;\n      const speakSentence = () => {\n        const sentence = sentences[currentIndex].trim();\n        const utterance = new SpeechSynthesisUtterance(sentence);\n        utterance.lang = this.selectedLanguage;\n        utterance.onend = () => {\n          if (repetitionsEnabled && repetitions > 1) {\n            repetitions--;\n            this.speakText(text, repetitions - 1, repetitionsEnabled);\n          } else if (currentIndex === sentences.length - 1) {\n            this.speakGeneralRepeat();\n          } else {\n            currentIndex++;\n            speakSentence();\n          }\n        };\n        speechSynthesis.speak(utterance);\n      };\n      speakSentence();\n    },\n    speakGeneralRepeat() {\n      const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n      const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n      this.speakText(fullText, repetitions);\n    },\n    checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n      if (userAnswer === expectedAnswer) {\n        alert(\"Bonne réponse !\");\n      } else {\n        alert(\"Mauvaise réponse. Réessayez !\");\n      }\n      if (this.currentRepetition < this.maxRepetitions) {\n        this.currentRepetition++;\n        this.isDictationStarted = true;\n      } else {\n        // ...\n      }\n      // Réinitialiser les valeurs\n      this.isDictationStarted = false;\n      this.currentText = \"\";\n      this.userInput = \"\";\n    }\n  }\n};","map":{"version":3,"names":["data","selectedLanguage","maxRepetitions","currentRepetition","timer","timeLimit","timeRemaining","repetitionsEnabled","isCreatingNewSubject","newSubject","title","text","selectedIndex","subjects","difficulty","selectedDifficulty","selectedSubject","isDictationStarted","currentText","userInput","computed","filteredSubjects","filter","subject","methods","createSubject","push","updateSubject","deleteSubject","confirmed","confirm","splice","selectSubject","index","cancelDelete","cancelNewSubject","saveNewSubject","newId","length","id","newNumber","number","startDictation","setInterval","clearInterval","checkAnswer","speakText","repetitions","sentences","split","currentIndex","speakSentence","sentence","trim","utterance","SpeechSynthesisUtterance","lang","onend","speakGeneralRepeat","speechSynthesis","speak","fullText","phrases","map","phrase","join","reduce","total","userAnswer","expectedAnswer","alert"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import { subjects } from \"@/data\";\n\n<template>\n  <div class=\"test-dictation\">\n\n    <h1><span>Dicté en ligne</span></h1>\n\n    <h1>{{ $t(\"BONJOUR ET BIENVENUE\") }}</h1>\n\n    <div class=\"container\">\n      <label for=\"difficulty\">Niveau de difficulté :</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"facile\">Facile</option>\n        <option value=\"moyen\">Moyen</option>\n        <option value=\"difficile\">Difficile</option>\n      </select>\n    </div>\n\n    <div class=\"container\">\n      <label for=\"language\">Langue :</label>\n      <select id=\"language\" v-model=\"selectedLanguage\">\n        <option value=\"en-US\">English</option>\n        <option value=\"fr-FR\">Français</option>\n        <!-- Ajoutez d'autres options pour les autres langues si nécessaire -->\n      </select>\n    </div>\n\n    <div v-if=\"filteredSubjects.length > 0\" class=\"container\">\n      <label for=\"subject\">Sujet :</label>\n      <select id=\"subject\" v-model=\"selectedSubject\">\n        <option value=\"\" disabled selected>Sélectionnez un sujet</option>\n        <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n      </select>\n      </div>\n      <div class=\"subject-actions\">\n        <button @click=\"createSubject\">Nouveau sujet</button>\n        <button @click=\"updateSubject\">Mettre à jour</button>\n         <button @click=\"deleteSubject\" :disabled=\"selectedIndex === null\">Supprimer</button>\n      </div>\n    \n       <div v-if=\"isCreatingNewSubject\">\n        <h2>Nouveau sujet</h2>\n        <label for=\"new-subject-title\">Titre :</label>\n        <input type=\"text\" id=\"new-subject-title\" v-model=\"newSubject.title\">\n\n        <label for=\"new-subject-text\">Texte :</label>\n        <textarea id=\"new-subject-text\" v-model=\"newSubject.text\"></textarea>\n\n        <button @click=\"saveNewSubject\">Enregistrer</button>\n        <button @click=\"cancelNewSubject\">Annuler</button>\n       </div>\n\n       <div class=\"subject-list\">\n  <ul>\n    <li v-for=\"(subject, index) in subjects\" :key=\"subject.id\" :class=\"{ active: index === selectedIndex }\">\n      <span @click=\"selectSubject(index)\">{{ subject.title }}</span>\n    </li>\n  </ul>\n</div>\n<div class=\"subject-actions\">\n  <button @click=\"createSubject\">Nouveau sujet</button>\n  <button @click=\"deleteSubject\" :disabled=\"selectedIndex === null\">Supprimer</button>\n  <button @click=\"cancelDelete\" :disabled=\"selectedIndex === null\">Annuler</button>\n</div>\n\n\n    <div v-if=\"selectedSubject\">\n      <h2>{{ selectedSubject.title }}</h2>\n      <button @click=\"startDictation\">Commencer la dictée</button>\n\n      <div v-if=\"isDictationStarted\">\n        <p>{{ currentText }}</p>\n        <textarea v-model=\"userInput\"></textarea>\n        <button @click=\"checkAnswer\">Vérifier</button>\n        <button @click=\"speakText(selectedSubject.text)\">Lire le texte</button>\n\n        <label for=\"repetitionsEnabled\">\n          <input\n            id=\"repetitionsEnabled\"\n            type=\"checkbox\"\n            v-model=\"repetitionsEnabled\"\n          >\n          Répéter les phrases\n        </label>\n\n        <div>\n          <p>Temps restant : {{ timeRemaining }}s</p>\n        </div>\n        \n        <h2>{{ selectedSubject.title }}</h2>\n        <button @click=\"startDictation\">{{ $t(\"Reprendre\") }}</button>\n        <div v-for=\"phrase in selectedSubject.phrases\" :key=\"phrase.text\">\n           <p>{{ phrase.text }}</p>\n           <input type=\"number\" v-model=\"phrase.repetitions\" min=\"1\">\n        </div>\n        <button @click=\"startGeneralRepeat\">{{ $t(\"RépétitionGénéral\") }}</button>\n\n        <div>\n          <p>Répétitions restantes : {{ maxRepetitions - currentRepetition }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n\n  data() {\n\n    return {\n      selectedLanguage: 'fr-FR', // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60, // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n      isCreatingNewSubject: false,\n      newSubject: {\n      title: \"\",\n      text: \"\",\n      selectedIndex: null,\n    },\n\n      subjects: [\n        {\n          title: \"Sujet 1\",\n          difficulty: \"facile\",\n          text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe. Ainsi il le faut vraiment pour un language meilleur.\"\n        },\n\n        {\n          title: \"Sujet 2\",\n          difficulty: \"moyen\",\n          text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n        },\n\n        {\n          title: \"Sujet 3\",\n          difficulty: \"difficile\",\n          text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n        },\n      ],\n        selectedDifficulty: \"\",\n        selectedSubject: null,\n        isDictationStarted: false,\n        currentText: \"\",\n        userInput: \"\"\n    };\n  },\n\n    computed: {\n        filteredSubjects() {\n          if (this.selectedDifficulty) {\n          return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n          } \n          else {\n            return this.subjects;\n          }\n        }\n      },\n\n    methods: {\n        createSubject() {\n          const newSubject = {\n            title: \"Nouveau sujet\",\n            difficulty: \"\",\n            text: \"\", \n          };\n          this.isCreatingNewSubject = true;\n          this.newSubject = {\n            title: \"\",\n            text: \"\"\n          };\n          this.subjects.push(newSubject);\n          this.selectedSubject = newSubject;\n        },\n\n        updateSubject() {\n             // Implémentez la logique pour mettre à jour le sujet sélectionné\n        },\n        \n     deleteSubject() {\n    if (this.selectedIndex !== null) {\n      const confirmed = confirm(\"Êtes-vous sûr de vouloir supprimer ce sujet ?\");\n      if (confirmed) {\n        this.subjects.splice(this.selectedIndex, 1);\n        this.selectedIndex = null;\n      }\n    }\n  },\n  selectSubject(index) {\n    this.selectedIndex = index;\n  },\n  cancelDelete() {\n    this.selectedIndex = null;\n  },\n         \n        cancelDelete() {\n          this.selectedIndex = null;\n        },\n\n\n        cancelNewSubject() {\n          this.isCreatingNewSubject = false;\n          this.newSubject = null;\n        },\n\n         saveNewSubject() {\n    // Génère un ID et un numéro pour le nouveau sujet\n    const newId = this.subjects.length > 0 ? this.subjects[this.subjects.length - 1].id + 1 : 1;\n    const newNumber = this.subjects.length + 1;\n\n    // Crée le nouvel objet sujet\n    const newSubject = {\n      id: newId,\n      number: newNumber,\n      title: this.newSubject.title,\n      difficulty: \"\", // Définir la difficulté selon les besoins\n      text: this.newSubject.text\n    };\n\n    // Ajoute le sujet au tableau\n    this.subjects.push(newSubject);\n\n    // Réinitialise les valeurs pour le prochain nouveau sujet\n    this.newSubject.title = \"\";\n    this.newSubject.text = \"\";\n    \n    // Sélectionne le nouveau sujet créé\n    this.selectedSubject = newSubject;\n\n    // Désactive le mode de création de nouveau sujet\n    this.isCreatingNewSubject = false;\n  },\n\n\n      startDictation() {\n          this.currentRepetition = 1;\n          this.timeRemaining = this.timeLimit;\n          this.timer = setInterval(() => {\n            if (this.timeRemaining > 0) {\n              this.timeRemaining--;\n            } else {\n              clearInterval(this.timer);\n              this.checkAnswer();\n            }\n          }, 1000);\n          this.isDictationStarted = true;\n          this.currentText = this.selectedSubject.text; // Modifier ici pour utiliser la variable correcte\n          this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, this.repetitionsEnabled); // Modifier ici pour utiliser la variable correcte\n      },\n\n      speakText(text, repetitions, repetitionsEnabled) {\n          const sentences = text.split('.'); // Diviser le texte en phrases en utilisant le point comme séparateur\n          let currentIndex = 0;\n          const speakSentence = () => {\n            const sentence = sentences[currentIndex].trim();\n            const utterance = new SpeechSynthesisUtterance(sentence);\n            utterance.lang = this.selectedLanguage;\n          utterance.onend = () => {\n            if (repetitionsEnabled && repetitions > 1) {\n              repetitions--;\n              this.speakText(text, repetitions - 1, repetitionsEnabled);\n            } else if (currentIndex === sentences.length - 1) {\n              this.speakGeneralRepeat();\n            } else {\n              currentIndex++;\n              speakSentence();\n            }\n          };\n          speechSynthesis.speak(utterance);\n        };\n          speakSentence();\n      },\n\n      speakGeneralRepeat() {\n        const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n        const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n\n        this.speakText(fullText, repetitions);\n      },\n\n      checkAnswer() {\n          const userAnswer = this.userInput.trim();\n          const expectedAnswer = this.selectedSubject.text.trim();\n            if (userAnswer === expectedAnswer) {\n              alert(\"Bonne réponse !\");\n            } else {\n              alert(\"Mauvaise réponse. Réessayez !\");\n            }\n\n            if (this.currentRepetition < this.maxRepetitions) {\n              this.currentRepetition++;\n              this.isDictationStarted = true;\n            } else {\n              // ...\n            }\n            // Réinitialiser les valeurs\n            this.isDictationStarted = false;\n            this.currentText = \"\";\n            this.userInput = \"\";\n          }\n        }\n  };\n</script>\n\n<style>\n  /* Importer votre fichier CSS externe */\n  @import './hello-world.css';\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}