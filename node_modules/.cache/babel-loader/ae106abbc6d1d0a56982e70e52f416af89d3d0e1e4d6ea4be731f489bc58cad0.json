{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedLanguage: 'fr-FR',\n      // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3,\n      // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60,\n      // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n      subjects: [{\n        title: \"Sujet 1\",\n        difficulty: \"facile\",\n        text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe. Ainsi il le faut vraiment pour un language meilleur.\"\n      }, {\n        title: \"Sujet 2\",\n        difficulty: \"moyen\",\n        text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n      }, {\n        title: \"Sujet 3\",\n        difficulty: \"difficile\",\n        text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n      }],\n      selectedDifficulty: \"\",\n      selectedSubject: null,\n      isDictationStarted: false,\n      currentText: \"\",\n      userInput: \"\"\n    };\n  },\n  computed: {\n    filteredSubjects() {\n      if (this.selectedDifficulty) {\n        return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n      } else {\n        return this.subjects;\n      }\n    }\n  },\n  methods: {\n    createSubject() {\n      const newSubject = {\n        title: \"Nouveau sujet\",\n        difficulty: \"\",\n        text: \"\"\n      };\n      this.subjects.push(newSubject);\n      this.selectedSubject = newSubject;\n    },\n    updateSubject() {\n      // Implémentez la logique pour mettre à jour le sujet sélectionné\n    },\n    deleteSubject() {\n      // Implémentez la logique pour supprimer le sujet sélectionné\n    },\n    startDictation() {\n      this.currentRepetition = 1;\n      this.timeRemaining = this.timeLimit;\n      this.timer = setInterval(() => {\n        if (this.timeRemaining > 0) {\n          this.timeRemaining--;\n        } else {\n          clearInterval(this.timer);\n          this.checkAnswer();\n        }\n      }, 1000);\n      this.isDictationStarted = true;\n      this.currentText = this.selectedSubject.text; // Modifier ici pour utiliser la variable correcte\n      this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, this.repetitionsEnabled); // Modifier ici pour utiliser la variable correcte\n    },\n\n    speakText(text, repetitions, repetitionsEnabled) {\n      const sentences = text.split('.'); // Diviser le texte en phrases en utilisant le point comme séparateur\n      let currentIndex = 0;\n      const speakSentence = () => {\n        const sentence = sentences[currentIndex].trim();\n        const utterance = new SpeechSynthesisUtterance(sentence);\n        utterance.lang = this.selectedLanguage;\n        utterance.onend = () => {\n          if (repetitionsEnabled && repetitions > 1) {\n            repetitions--;\n            this.speakText(text, repetitions - 1, repetitionsEnabled);\n          } else if (currentIndex === sentences.length - 1) {\n            this.speakGeneralRepeat();\n          } else {\n            currentIndex++;\n            speakSentence();\n          }\n        };\n        speechSynthesis.speak(utterance);\n      };\n      speakSentence();\n    },\n    speakGeneralRepeat() {\n      const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n      const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n      this.speakText(fullText, repetitions);\n    },\n    checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n      if (userAnswer === expectedAnswer) {\n        alert(\"Bonne réponse !\");\n      } else {\n        alert(\"Mauvaise réponse. Réessayez !\");\n      }\n      if (this.currentRepetition < this.maxRepetitions) {\n        this.currentRepetition++;\n        this.isDictationStarted = true;\n      } else {\n        // ...\n      }\n\n      // Réinitialiser les valeurs\n      this.isDictationStarted = false;\n      this.currentText = \"\";\n      this.userInput = \"\";\n    }\n  }\n};","map":{"version":3,"names":["data","selectedLanguage","maxRepetitions","currentRepetition","timer","timeLimit","timeRemaining","repetitionsEnabled","subjects","title","difficulty","text","selectedDifficulty","selectedSubject","isDictationStarted","currentText","userInput","computed","filteredSubjects","filter","subject","methods","createSubject","newSubject","push","updateSubject","deleteSubject","startDictation","setInterval","clearInterval","checkAnswer","speakText","repetitions","sentences","split","currentIndex","speakSentence","sentence","trim","utterance","SpeechSynthesisUtterance","lang","onend","length","speakGeneralRepeat","speechSynthesis","speak","fullText","phrases","map","phrase","join","reduce","total","userAnswer","expectedAnswer","alert"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import { subjects } from \"@/data\";\n\n<template>\n  <div class=\"test-dictation\">\n    <h1>Test de dictée</h1>\n    <h1>{{ $t(\"BONJOUR ET BIENVENUE\") }}</h1>\n    <div>\n      <label for=\"difficulty\">Niveau de difficulté :</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"facile\">Facile</option>\n        <option value=\"moyen\">Moyen</option>\n        <option value=\"difficile\">Difficile</option>\n      </select>\n    </div>\n\n    <div>\n      <label for=\"language\">Langue :</label>\n      <select id=\"language\" v-model=\"selectedLanguage\">\n        <option value=\"en-US\">English</option>\n        <option value=\"fr-FR\">Français</option>\n        <!-- Ajoutez d'autres options pour les autres langues si nécessaire -->\n      </select>\n    </div>\n\n    <div v-if=\"filteredSubjects.length > 0\">\n      <label for=\"subject\">Sujet :</label>\n      <select id=\"subject\" v-model=\"selectedSubject\">\n        <option value=\"\" disabled selected>Sélectionnez un sujet</option>\n        <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n      </select>\n\n      <div class=\"subject-actions\">\n        <button @click=\"createSubject\">Nouveau sujet</button>\n        <button @click=\"updateSubject\">Mettre à jour</button>\n        <button @click=\"deleteSubject\">Supprimer</button>\n      </div>\n    </div>\n\n    <div v-if=\"selectedSubject\">\n      <h2>{{ selectedSubject.title }}</h2>\n      <button @click=\"startDictation\">Commencer la dictée</button>\n\n      <div v-if=\"isDictationStarted\">\n        <p>{{ currentText }}</p>\n        <textarea v-model=\"userInput\"></textarea>\n        <button @click=\"checkAnswer\">Vérifier</button>\n        <button @click=\"speakText(selectedSubject.text)\">Lire le texte</button>\n\n        <label for=\"repetitionsEnabled\">\n          <input\n            id=\"repetitionsEnabled\"\n            type=\"checkbox\"\n            v-model=\"repetitionsEnabled\"\n          >\n          Répéter les phrases\n        </label>\n\n        <div>\n          <p>Temps restant : {{ timeRemaining }}s</p>\n        </div>\n        \n        <h2>{{ selectedSubject.title }}</h2>\n        <button @click=\"startDictation\">{{ $t(\"startDictation\") }}</button>\n        <div v-for=\"phrase in selectedSubject.phrases\" :key=\"phrase.text\">\n           <p>{{ phrase.text }}</p>\n           <input type=\"number\" v-model=\"phrase.repetitions\" min=\"1\">\n        </div>\n        <button @click=\"startGeneralRepeat\">{{ $t(\"startGeneralRepeat\") }}</button>\n\n        <div>\n          <p>Répétitions restantes : {{ maxRepetitions - currentRepetition }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n\n  data() {\n\n    return {\n      selectedLanguage: 'fr-FR', // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60, // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n\n      subjects: [\n        {\n          title: \"Sujet 1\",\n          difficulty: \"facile\",\n          text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe. Ainsi il le faut vraiment pour un language meilleur.\"\n        },\n\n        {\n          title: \"Sujet 2\",\n          difficulty: \"moyen\",\n          text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n        },\n\n        {\n          title: \"Sujet 3\",\n          difficulty: \"difficile\",\n          text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n        },\n      ],\n        selectedDifficulty: \"\",\n        selectedSubject: null,\n        isDictationStarted: false,\n        currentText: \"\",\n        userInput: \"\"\n    };\n  },\n\n    computed: {\n        filteredSubjects() {\n          if (this.selectedDifficulty) {\n          return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n          } \n          else {\n            return this.subjects;\n          }\n        }\n      },\n\n    methods: {\n        createSubject() {\n          const newSubject = {\n            title: \"Nouveau sujet\",\n            difficulty: \"\",\n            text: \"\", \n          };\n          this.subjects.push(newSubject);\n          this.selectedSubject = newSubject;\n        },\n\n        updateSubject() {\n             // Implémentez la logique pour mettre à jour le sujet sélectionné\n        },\n        deleteSubject() {\n             // Implémentez la logique pour supprimer le sujet sélectionné\n        },\n\n\n      startDictation() {\n          this.currentRepetition = 1;\n          this.timeRemaining = this.timeLimit;\n          this.timer = setInterval(() => {\n            if (this.timeRemaining > 0) {\n              this.timeRemaining--;\n            } else {\n              clearInterval(this.timer);\n              this.checkAnswer();\n            }\n          }, 1000);\n          this.isDictationStarted = true;\n          this.currentText = this.selectedSubject.text; // Modifier ici pour utiliser la variable correcte\n          this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, this.repetitionsEnabled); // Modifier ici pour utiliser la variable correcte\n      },\n\n      speakText(text, repetitions, repetitionsEnabled) {\n          const sentences = text.split('.'); // Diviser le texte en phrases en utilisant le point comme séparateur\n          let currentIndex = 0;\n          const speakSentence = () => {\n            const sentence = sentences[currentIndex].trim();\n            const utterance = new SpeechSynthesisUtterance(sentence);\n            utterance.lang = this.selectedLanguage;\n          utterance.onend = () => {\n            if (repetitionsEnabled && repetitions > 1) {\n              repetitions--;\n              this.speakText(text, repetitions - 1, repetitionsEnabled);\n            } else if (currentIndex === sentences.length - 1) {\n              this.speakGeneralRepeat();\n            } else {\n              currentIndex++;\n              speakSentence();\n            }\n          };\n          speechSynthesis.speak(utterance);\n        };\n          speakSentence();\n},\n\nspeakGeneralRepeat() {\n  const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n  const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n\n  this.speakText(fullText, repetitions);\n},\n\n      checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n        if (userAnswer === expectedAnswer) {\n          alert(\"Bonne réponse !\");\n        } else {\n          alert(\"Mauvaise réponse. Réessayez !\");\n        }\n\n        if (this.currentRepetition < this.maxRepetitions) {\n          this.currentRepetition++;\n          this.isDictationStarted = true;\n        } else {\n          // ...\n        }\n\n        // Réinitialiser les valeurs\n        this.isDictationStarted = false;\n        this.currentText = \"\";\n        this.userInput = \"\";\n      }\n      }\n      };\n</script>\n<style>\n  /* Importer votre fichier CSS externe */\n  @import './hello-world.css';\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}