{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelText as _vModelText, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"test-dictation\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Test de dictée\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"difficulty\"\n}, \"Niveau de difficulté :\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"facile\"\n}, \"Facile\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"moyen\"\n}, \"Moyen\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"difficile\"\n}, \"Difficile\", -1 /* HOISTED */));\nconst _hoisted_7 = [_hoisted_4, _hoisted_5, _hoisted_6];\nconst _hoisted_8 = {\n  key: 0\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"subject\"\n}, \"Sujet :\", -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n}, \"Sélectionnez un sujet\", -1 /* HOISTED */));\nconst _hoisted_11 = [\"value\"];\nconst _hoisted_12 = {\n  key: 1\n};\nconst _hoisted_13 = {\n  key: 0\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"select\", {\n    id: \"difficulty\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedDifficulty = $event)\n  }, _hoisted_7, 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedDifficulty]])]), _ctx.filteredSubjects.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_hoisted_9, _withDirectives(_createElementVNode(\"select\", {\n    id: \"subject\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedSubject = $event)\n  }, [_hoisted_10, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject.title,\n      value: subject\n    }, _toDisplayString(subject.title), 9 /* TEXT, PROPS */, _hoisted_11);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedSubject]])])) : _createCommentVNode(\"v-if\", true), _ctx.selectedSubject ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"h2\", null, _toDisplayString(_ctx.selectedSubject.title), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.startDictation && _ctx.startDictation(...args))\n  }, \"Commencer la dictée\"), _ctx.isDictationStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.currentText), 1 /* TEXT */), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.userInput = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.checkAnswer && _ctx.checkAnswer(...args))\n  }, \"Vérifier\"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.speakText && _ctx.speakText(...args))\n  }, \"Lire le texte\")])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","value","_hoisted_4","_hoisted_5","_hoisted_6","disabled","selected","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","id","_ctx","selectedDifficulty","$event","filteredSubjects","length","_hoisted_8","_hoisted_9","selectedSubject","_hoisted_10","_Fragment","_renderList","subject","key","title","_hoisted_11","_hoisted_12","_toDisplayString","onClick","_cache","args","startDictation","isDictationStarted","_hoisted_13","currentText","userInput","checkAnswer","speakText"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import VueSpeech from \"vue-speech\";\n<template>\n  <div class=\"test-dictation\">\n    <h1>Test de dictée</h1>\n    <div>\n      <label for=\"difficulty\">Niveau de difficulté :</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"facile\">Facile</option>\n        <option value=\"moyen\">Moyen</option>\n        <option value=\"difficile\">Difficile</option>\n      </select>\n    </div>\n    <div v-if=\"filteredSubjects.length > 0\">\n     <label for=\"subject\">Sujet :</label>\n     <select id=\"subject\" v-model=\"selectedSubject\">\n     <option value=\"\" disabled selected>Sélectionnez un sujet</option>\n     <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n     </select>\n    </div>\n    <div v-if=\"selectedSubject\">\n    <h2>{{ selectedSubject.title }}</h2>\n    <button @click=\"startDictation\">Commencer la dictée</button>\n    <div v-if=\"isDictationStarted\">\n      <p>{{ currentText }}</p>\n      <textarea v-model=\"userInput\"></textarea>\n      <button @click=\"checkAnswer\">Vérifier</button>\n      <button @click=\"speakText\">Lire le texte</button>\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  data() {\n  return {\n    subjects: [\n      {\n        title: \"Sujet 1\",\n        difficulty: \"facile\",\n        text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe.\"\n      },\n      {\n        title: \"Sujet 2\",\n        difficulty: \"moyen\",\n        text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n      },\n      {\n        title: \"Sujet 3\",\n        difficulty: \"difficile\",\n        text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n      }\n    ],\n    selectedDifficulty: \"\",\n    selectedSubject: null,\n    isDictationStarted: false,\n    currentText: \"\",\n    userInput: \"\"\n  };\n},\ncomputed: {\n  filteredSubjects() {\n    if (this.selectedDifficulty) {\n      return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n    } else {\n      return this.subjects;\n    }\n  }\n},\n\n  methods: {\n\n     createSubject() {\n    const newSubject = {\n      title: \"Nouveau sujet\",\n      difficulty: \"\",\n      text: \"\"\n    };\n    this.subjects.push(newSubject);\n    this.selectedSubject = newSubject;\n  },\n\n  updateSubject() {\n    // Implémentez la logique pour mettre à jour le sujet sélectionné\n  },\n\n  deleteSubject() {\n    // Implémentez la logique pour supprimer le sujet sélectionné\n  }\n    startDictation() {\n      this.isDictationStarted = true;\n      this.currentText = this.selectedSubject.text;\n    },\n    speakText() {\n      const textToSpeak = this.selectedSubject.text;\n      this.$speech.say(textToSpeak);\n    },\n    checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n\n      if (userAnswer === expectedAnswer) {\n        alert(\"Bonne réponse !\");\n      } else {\n        alert(\"Mauvaise réponse. Réessayez !\");\n      }\n\n      // Réinitialiser les valeurs\n      this.isDictationStarted = false;\n      this.currentText = \"\";\n      this.userInput = \"\";\n    }\n  }\n}\n\n\n</script>\n<style scoped>\n.test-dictation {\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1, h2 {\n  text-align: center;\n}\n\nselect, button {\n  margin-bottom: 10px;\n}\n\ntextarea {\n  width: 100%;\n  height: 100px;\n  margin-bottom: 10px;\n}\n</style>\n\n"],"mappings":";;;EAEOA,KAAK,EAAC;AAAgB;gEACzBC,mBAAA,CAAuB,YAAnB,gBAAc;gEAEhBA,mBAAA,CAAsD;EAA/CC,GAAG,EAAC;AAAY,GAAC,wBAAsB;gEAE5CD,mBAAA,CAAsC;EAA9BE,KAAK,EAAC;AAAQ,GAAC,QAAM;gEAC7BF,mBAAA,CAAoC;EAA5BE,KAAK,EAAC;AAAO,GAAC,OAAK;gEAC3BF,mBAAA,CAA4C;EAApCE,KAAK,EAAC;AAAW,GAAC,WAAS;oBAFnCC,UAAsC,EACtCC,UAAoC,EACpCC,UAA4C,C;;;;gEAI/CL,mBAAA,CAAoC;EAA7BC,GAAG,EAAC;AAAS,GAAC,SAAO;iEAE5BD,mBAAA,CAAiE;EAAzDE,KAAK,EAAC,EAAE;EAACI,QAAQ,EAAR,EAAQ;EAACC,QAAQ,EAAR;GAAS,uBAAqB;;;;;;;;;uBAb3DC,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJC,UAAuB,EACvBV,mBAAA,CAOM,cANJW,UAAsD,E,gBACtDX,mBAAA,CAIS;IAJDY,EAAE,EAAC,YAAY;+DAAUC,IAAA,CAAAC,kBAAkB,GAAAC,MAAA;yDAAlBF,IAAA,CAAAC,kBAAkB,E,KAM1CD,IAAA,CAAAG,gBAAgB,CAACC,MAAM,Q,cAAlCT,mBAAA,CAMM,OAAAU,UAAA,GALLC,UAAoC,E,gBACpCnB,mBAAA,CAGS;IAHDY,EAAE,EAAC,SAAS;+DAAUC,IAAA,CAAAO,eAAe,GAAAL,MAAA;MAC7CM,WAAiE,G,kBACjEb,mBAAA,CAA8Gc,SAAA,QAAAC,WAAA,CAApFV,IAAA,CAAAG,gBAAgB,EAA3BQ,OAAO;yBAAtBhB,mBAAA,CAA8G;MAAjEiB,GAAG,EAAED,OAAO,CAACE,KAAK;MAAGxB,KAAK,EAAEsB;wBAAYA,OAAO,CAACE,KAAK,wBAAAC,WAAA;2EAFpEd,IAAA,CAAAO,eAAe,E,0CAKnCP,IAAA,CAAAO,eAAe,I,cAA1BZ,mBAAA,CASI,OAAAoB,WAAA,GARJ5B,mBAAA,CAAoC,YAAA6B,gBAAA,CAA7BhB,IAAA,CAAAO,eAAe,CAACM,KAAK,kBAC5B1B,mBAAA,CAA4D;IAAnD8B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEnB,IAAA,CAAAoB,cAAA,IAAApB,IAAA,CAAAoB,cAAA,IAAAD,IAAA,CAAc;KAAE,qBAAmB,GACxCnB,IAAA,CAAAqB,kBAAkB,I,cAA7B1B,mBAAA,CAKM,OAAA2B,WAAA,GAJJnC,mBAAA,CAAwB,WAAA6B,gBAAA,CAAlBhB,IAAA,CAAAuB,WAAW,kB,gBACjBpC,mBAAA,CAAyC;+DAAtBa,IAAA,CAAAwB,SAAS,GAAAtB,MAAA;iDAATF,IAAA,CAAAwB,SAAS,E,GAC5BrC,mBAAA,CAA8C;IAArC8B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEnB,IAAA,CAAAyB,WAAA,IAAAzB,IAAA,CAAAyB,WAAA,IAAAN,IAAA,CAAW;KAAE,UAAQ,GACrChC,mBAAA,CAAiD;IAAxC8B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEnB,IAAA,CAAA0B,SAAA,IAAA1B,IAAA,CAAA0B,SAAA,IAAAP,IAAA,CAAS;KAAE,eAAa,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}