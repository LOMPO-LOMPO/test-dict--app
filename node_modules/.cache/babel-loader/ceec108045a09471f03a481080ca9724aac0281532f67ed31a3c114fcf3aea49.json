{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport subjects from './subjects.json';\nexport default {\n  data() {\n    return {\n      selectedLanguage: 'fr-FR',\n      // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3,\n      // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60,\n      // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n      isCreatingNewSubject: false,\n      newSubject: {\n        title: \"\",\n        text: \"\",\n        synth: null\n      },\n      volume: 1,\n      subjects: subjects,\n      selectedDifficulty: \"\",\n      selectedSubject: null,\n      isDictationStarted: false,\n      currentText: \"\",\n      userInput: \"\"\n    };\n  },\n  computed: {\n    filteredSubjects() {\n      if (this.selectedDifficulty) {\n        return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n      } else {\n        return this.subjects;\n      }\n    }\n  },\n  methods: {\n    createSubject() {\n      const newSubject = {\n        title: \"Nouveau sujet\",\n        difficulty: \"\",\n        text: \"\"\n      };\n      this.isCreatingNewSubject = true;\n      this.newSubject = {\n        title: \"\",\n        text: \"\"\n      };\n      this.subjects.push(newSubject);\n      this.selectedSubject = newSubject;\n    },\n    updateSubject() {\n      // Implémentez la logique pour mettre à jour le sujet sélectionné\n    },\n    deleteSubject() {\n      // Implémentez la logique pour supprimer le sujet sélectionné\n    },\n    cancelNewSubject() {\n      this.isCreatingNewSubject = false;\n      this.newSubject = null;\n    },\n    saveNewSubject() {\n      // Génère un ID et un numéro pour le nouveau sujet\n      const newId = this.subjects.length > 0 ? this.subjects[this.subjects.length - 1].id + 1 : 1;\n      const newNumber = this.subjects.length + 1;\n\n      // Crée le nouvel objet sujet\n      const newSubject = {\n        id: newId,\n        number: newNumber,\n        title: this.newSubject.title,\n        difficulty: \"\",\n        // Définir la difficulté selon les besoins\n        text: this.newSubject.text\n      };\n\n      // Ajoute le sujet au tableau\n      this.subjects.push(newSubject);\n\n      // Réinitialise les valeurs pour le prochain nouveau sujet\n      this.newSubject.title = \"\";\n      this.newSubject.text = \"\";\n\n      // Sélectionne le nouveau sujet créé\n      this.selectedSubject = newSubject;\n\n      // Désactive le mode de création de nouveau sujet\n      this.isCreatingNewSubject = false;\n    },\n    increaseVolume() {\n      this.volume += 0.1; // Augmentation du volume (ajustez la valeur selon vos besoins)\n      this.speakText(this.selectedSubject.text);\n    },\n    repeatDictation() {\n      this.speakGeneralRepeat();\n    },\n    startDictation() {\n      this.currentRepetition = 1;\n      this.timeRemaining = this.timeLimit;\n      this.timer = setInterval(() => {\n        if (this.timeRemaining > 0) {\n          this.timeRemaining--;\n        } else {\n          clearInterval(this.timer);\n          this.checkAnswer();\n        }\n      }, 1000);\n      this.isDictationStarted = true;\n      let rate = 1; // Vitesse normale par défaut\n\n      if (this.selectedDifficulty === \"Facile\") {\n        rate = 0.5; // Vitesse lente pour la difficulté \"Facile\"\n      } else if (this.selectedDifficulty === \"Difficile\") {\n        rate = 1.5; // Vitesse rapide pour la difficulté \"Difficile\"\n      }\n\n      this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, rate, this.selectedLanguage);\n    },\n    speakText(fullText, repetitions, rate, language) {\n      if (this.synth === undefined) {\n        this.synth = window.speechSynthesis;\n      }\n      const phrases = fullText.split('. ');\n      const speechQueue = [];\n      phrases.forEach(text => {\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.voice = this.selectedVoice;\n        if (isFinite(this.volume)) {\n          utterance.volume = parseFloat(this.volume);\n        } else {\n          utterance.volume = 1;\n        }\n        utterance.pitch = isFinite(this.pitch) ? this.pitch : 1;\n        utterance.rate = isFinite(rate) ? rate : 1; // Utilisation de la variable \"rate\" pour définir la vitesse de lecture\n        utterance.lang = language;\n        utterance.onend = () => {\n          if (repetitions > 0) {\n            speechQueue.push(utterance);\n            speechQueue.push(new SpeechSynthesisUtterance(text));\n            repetitions--;\n          }\n          if (speechQueue.length > 0) {\n            const nextUtterance = speechQueue.shift();\n            this.synth.speak(nextUtterance);\n          }\n        };\n        speechQueue.push(utterance);\n      });\n      const firstUtterance = speechQueue.shift();\n      this.synth.speak(firstUtterance);\n    },\n    speakGeneralRepeat() {\n      if (this.selectedSubject && this.selectedSubject.phrases) {\n        const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n        const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n        this.speakText(fullText, repetitions);\n      }\n    },\n    checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n      if (userAnswer === expectedAnswer) {\n        alert(\"Bonne réponse !\");\n      } else {\n        alert(\"Mauvaise réponse. Réessayez !\");\n      }\n      if (this.currentRepetition < this.maxRepetitions) {\n        this.currentRepetition++;\n        this.isDictationStarted = true;\n      } else {\n        // ...\n      }\n      // Réinitialiser les valeurs\n      this.isDictationStarted = false;\n      this.currentText = \"\";\n      this.userInput = \"\";\n    }\n  }\n};","map":{"version":3,"names":["subjects","data","selectedLanguage","maxRepetitions","currentRepetition","timer","timeLimit","timeRemaining","repetitionsEnabled","isCreatingNewSubject","newSubject","title","text","synth","volume","selectedDifficulty","selectedSubject","isDictationStarted","currentText","userInput","computed","filteredSubjects","filter","subject","difficulty","methods","createSubject","push","updateSubject","deleteSubject","cancelNewSubject","saveNewSubject","newId","length","id","newNumber","number","increaseVolume","speakText","repeatDictation","speakGeneralRepeat","startDictation","setInterval","clearInterval","checkAnswer","rate","repetitions","fullText","language","undefined","window","speechSynthesis","phrases","split","speechQueue","forEach","utterance","SpeechSynthesisUtterance","voice","selectedVoice","isFinite","parseFloat","pitch","lang","onend","nextUtterance","shift","speak","firstUtterance","map","phrase","join","reduce","total","userAnswer","trim","expectedAnswer","alert"],"sources":["/home/lompo/Bureau/test-dictee-app/src/components/HelloWorld.vue"],"sourcesContent":["import { subjects } from \"@/data\";\nimport { createI18n } from 'vue-i18n';\nimport subjects from './subjects.json';\n\n\n\n<template>\n  <div class=\"test-dictation\">\n\n    <h1><span>Dicté en ligne</span></h1>\n    <div class=\"container\">\n      <label for=\"difficulty\">Niveau de difficulté :</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"facile\">Facile</option>\n        <option value=\"moyen\">Moyen</option>\n        <option value=\"difficile\">Difficile</option>\n      </select>\n    </div>\n\n    <div class=\"container\">\n      <label for=\"language\">Langue :</label>\n      <select id=\"language\" v-model=\"selectedLanguage\">\n        <option value=\"en-US\">English</option>\n        <option value=\"fr-FR\">Français</option>\n        <!-- Ajoutez d'autres options pour les autres langues si nécessaire -->\n      </select>\n    </div>\n\n    <div v-if=\"filteredSubjects.length > 0\" class=\"container\">\n      <label for=\"subject\">Sujet :</label>\n      <select id=\"subject\" v-model=\"selectedSubject\">\n        <option value=\"\" disabled selected>Sélectionnez un sujet</option>\n        <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n      </select>\n      </div>\n      <div class=\"subject-actions\">\n        <button @click=\"createSubject\">Nouveau sujet</button>\n        <button @click=\"updateSubject\">Mettre à jour</button>\n        <button @click=\"deleteSubject\">Supprimer</button>\n        \n      </div>\n    \n       <div v-if=\"isCreatingNewSubject\">\n        <h2>Nouveau sujet</h2>\n        <label for=\"new-subject-title\">Titre :</label>\n        <input type=\"text\" id=\"new-subject-title\" v-model=\"newSubject.title\">\n\n        <label for=\"new-subject-text\">Texte :</label>\n        <textarea id=\"new-subject-text\" v-model=\"newSubject.text\"></textarea>\n\n        <button @click=\"saveNewSubject\">Enregistrer</button>\n        <button @click=\"cancelNewSubject\">Annuler</button>\n       </div>\n\n    <div v-if=\"selectedSubject\">\n      <h2>{{ selectedSubject.title }}</h2>\n      <button @click=\"startDictation\">Commencer la dictée</button>\n\n      <div v-if=\"isDictationStarted\">\n        <p>{{ currentText }}</p>\n        <textarea v-model=\"userInput\"></textarea>\n        <button @click=\"checkAnswer\">Vérifier</button>\n        <button @click=\"speakText(selectedSubject.text)\">Lire le texte</button>\n\n        <label for=\"repetitionsEnabled\">\n          <input\n            id=\"repetitionsEnabled\"\n            type=\"checkbox\"\n            v-model=\"repetitionsEnabled\"\n          >\n          Répéter les phrases\n        </label>\n\n        <div>\n          <p>Temps restant : {{ timeRemaining }}s</p>\n        </div>\n        \n        <h2>{{ selectedSubject.title }}</h2>\n        <button @click=\"startDictation\">{{ (\"Reprendre\") }}</button>\n        <button @click=\"increaseVolume\">Augmenter le volume</button>\n        <div v-for=\"phrase in selectedSubject.phrases\" :key=\"phrase.text\">\n           <p>{{ phrase.text }}</p>\n           <input type=\"number\" v-model=\"phrase.repetitions\" min=\"1\">\n        </div>\n        <button @click=\"startGeneralRepeat\">{{ (\"RépétitionGénéral\") }}</button>\n        <button @click=\"repeatDictation\">Répéter</button>\n\n        <div>\n          <p>Répétitions restantes : {{ maxRepetitions - currentRepetition }}</p>\n        </div>\n        <div class=\"container\">\n      <label for=\"volume\">Volume :</label>\n      <input type=\"range\" id=\"volume\" v-model=\"volume\" min=\"0\" max=\"1\" step=\"0.1\"> \n    </div>\n\n      </div>\n    </div>\n    \n  </div>\n</template>\n\n<script>\nimport subjects from './subjects.json';\nexport default {\n\n  data() {\n\n    return {\n      selectedLanguage: 'fr-FR', // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60, // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n      isCreatingNewSubject: false,\n      newSubject: {\n        title: \"\",\n        text: \"\",\n        synth: null,\n      },\n      volume: 1,\n      subjects: subjects,\n\n      selectedDifficulty: \"\",\n      selectedSubject: null,\n      isDictationStarted: false,\n      currentText: \"\",\n      userInput: \"\"\n    };\n\n  },\n\n    computed: {\n        filteredSubjects() {\n          if (this.selectedDifficulty) {\n          return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n          } \n          else {\n            return this.subjects;\n          }\n        }\n      },\n\n\n    methods: {\n      \n        createSubject() {\n          const newSubject = {\n            title: \"Nouveau sujet\",\n            difficulty: \"\",\n            text: \"\", \n          };\n          this.isCreatingNewSubject = true;\n          this.newSubject = {\n            title: \"\",\n            text: \"\"\n          };\n          this.subjects.push(newSubject);\n          this.selectedSubject = newSubject;\n        },\n\n        updateSubject() {\n             // Implémentez la logique pour mettre à jour le sujet sélectionné\n        },\n        deleteSubject() {\n             // Implémentez la logique pour supprimer le sujet sélectionné\n        },\n\n        cancelNewSubject() {\n          this.isCreatingNewSubject = false;\n          this.newSubject = null;\n        },\n\n         saveNewSubject() {\n          // Génère un ID et un numéro pour le nouveau sujet\n          const newId = this.subjects.length > 0 ? this.subjects[this.subjects.length - 1].id + 1 : 1;\n          const newNumber = this.subjects.length + 1;\n\n          // Crée le nouvel objet sujet\n          const newSubject = {\n            id: newId,\n            number: newNumber,\n            title: this.newSubject.title,\n            difficulty: \"\", // Définir la difficulté selon les besoins\n            text: this.newSubject.text\n          };\n\n          // Ajoute le sujet au tableau\n          this.subjects.push(newSubject);\n\n          // Réinitialise les valeurs pour le prochain nouveau sujet\n          this.newSubject.title = \"\";\n          this.newSubject.text = \"\";\n          \n          // Sélectionne le nouveau sujet créé\n          this.selectedSubject = newSubject;\n\n          // Désactive le mode de création de nouveau sujet\n          this.isCreatingNewSubject = false;\n        },\n        increaseVolume() {\n    this.volume += 0.1; // Augmentation du volume (ajustez la valeur selon vos besoins)\n    this.speakText(this.selectedSubject.text);\n  },\n\n        repeatDictation() {\n          this.speakGeneralRepeat();\n        },\n\n          startDictation() {\n        this.currentRepetition = 1;\n        this.timeRemaining = this.timeLimit;\n        this.timer = setInterval(() => {\n          if (this.timeRemaining > 0) {\n            this.timeRemaining--;\n          } else {\n            clearInterval(this.timer);\n            this.checkAnswer();\n          }\n        }, 1000);\n        this.isDictationStarted = true;\n\n        let rate = 1; // Vitesse normale par défaut\n\n        if (this.selectedDifficulty === \"Facile\") {\n          rate = 0.5; // Vitesse lente pour la difficulté \"Facile\"\n        } else if (this.selectedDifficulty === \"Difficile\") {\n          rate = 1.5; // Vitesse rapide pour la difficulté \"Difficile\"\n        }\n\n        this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, rate, this.selectedLanguage);\n      },\n\n\n    speakText(fullText, repetitions, rate, language) {\n        if (this.synth === undefined) {\n          this.synth = window.speechSynthesis;\n        }\n\n        const phrases = fullText.split('. ');\n        const speechQueue = [];\n\n        phrases.forEach((text) => {\n          const utterance = new SpeechSynthesisUtterance(text);\n          utterance.voice = this.selectedVoice;\n\n          if (isFinite(this.volume)) {\n            utterance.volume = parseFloat(this.volume);\n          } else {\n            utterance.volume = 1;\n          }\n          utterance.pitch = isFinite(this.pitch) ? this.pitch : 1;\n          utterance.rate = isFinite(rate) ? rate : 1; // Utilisation de la variable \"rate\" pour définir la vitesse de lecture\n          utterance.lang = language;\n\n          utterance.onend = () => {\n            if (repetitions > 0) {\n              speechQueue.push(utterance);\n              speechQueue.push(new SpeechSynthesisUtterance(text));\n              repetitions--;\n            }\n\n            if (speechQueue.length > 0) {\n              const nextUtterance = speechQueue.shift();\n              this.synth.speak(nextUtterance);\n            }\n          };\n\n          speechQueue.push(utterance);\n        });\n\n        const firstUtterance = speechQueue.shift();\n        this.synth.speak(firstUtterance);\n      },\n\n\n\n\n      speakGeneralRepeat() {\n        if (this.selectedSubject && this.selectedSubject.phrases) {\n          const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n          const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n\n          this.speakText(fullText, repetitions);\n        }\n      },\n\n\n      checkAnswer() {\n          const userAnswer = this.userInput.trim();\n          const expectedAnswer = this.selectedSubject.text.trim();\n            if (userAnswer === expectedAnswer) {\n              alert(\"Bonne réponse !\");\n            } else {\n              alert(\"Mauvaise réponse. Réessayez !\");\n            }\n\n            if (this.currentRepetition < this.maxRepetitions) {\n              this.currentRepetition++;\n              this.isDictationStarted = true;\n            } else {\n              // ...\n            }\n            // Réinitialiser les valeurs\n            this.isDictationStarted = false;\n            this.currentText = \"\";\n            this.userInput = \"\";\n          }\n        }\n  };\n</script>\n\n<style>\n  /* Importer votre fichier CSS externe */\n  @import './hello-world.css';\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}