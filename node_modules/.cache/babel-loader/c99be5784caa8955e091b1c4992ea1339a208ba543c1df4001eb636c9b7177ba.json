{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"test-dictation\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Test de dictée\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"difficulty\"\n}, \"Niveau de difficulté :\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"facile\"\n}, \"Facile\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"moyen\"\n}, \"Moyen\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"difficile\"\n}, \"Difficile\", -1 /* HOISTED */));\nconst _hoisted_7 = [_hoisted_4, _hoisted_5, _hoisted_6];\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"language\"\n}, \"Langue :\", -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"en-US\"\n}, \"English\", -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"fr-FR\"\n}, \"Français\", -1 /* HOISTED */));\nconst _hoisted_11 = {\n  key: 0\n};\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"subject\"\n}, \"Sujet :\", -1 /* HOISTED */));\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n}, \"Sélectionnez un sujet\", -1 /* HOISTED */));\nconst _hoisted_14 = [\"value\"];\nconst _hoisted_15 = {\n  class: \"subject-actions\"\n};\nconst _hoisted_16 = {\n  key: 1\n};\nconst _hoisted_17 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"h1\", null, _toDisplayString(_ctx.$t(\"welcome\")), 1 /* TEXT */), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"select\", {\n    id: \"difficulty\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedDifficulty = $event)\n  }, _hoisted_7, 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedDifficulty]])]), _createElementVNode(\"div\", null, [_hoisted_8, _withDirectives(_createElementVNode(\"select\", {\n    id: \"language\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedLanguage = $event)\n  }, [_hoisted_9, _hoisted_10, _createCommentVNode(\" Ajoutez d'autres options pour les autres langues si nécessaire \")], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedLanguage]])]), $options.filteredSubjects.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_hoisted_12, _withDirectives(_createElementVNode(\"select\", {\n    id: \"subject\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.selectedSubject = $event)\n  }, [_hoisted_13, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject.title,\n      value: subject\n    }, _toDisplayString(subject.title), 9 /* TEXT, PROPS */, _hoisted_14);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedSubject]]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.createSubject && $options.createSubject(...args))\n  }, \"Nouveau sujet\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.updateSubject && $options.updateSubject(...args))\n  }, \"Mettre à jour\"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.deleteSubject && $options.deleteSubject(...args))\n  }, \"Supprimer\")])])) : _createCommentVNode(\"v-if\", true), $data.selectedSubject ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"h2\", null, _toDisplayString($data.selectedSubject.title), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.startDictation && $options.startDictation(...args))\n  }, \"Commencer la dictée\"), $data.isDictationStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"p\", null, _toDisplayString($data.currentText), 1 /* TEXT */), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.userInput = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.checkAnswer && $options.checkAnswer(...args))\n  }, \"Vérifier\"), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.speakText && $options.speakText(...args))\n  }, \"Lire le texte\"), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Temps restant : \" + _toDisplayString($data.timeRemaining) + \"s\", 1 /* TEXT */)]), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Répétitions restantes : \" + _toDisplayString($data.maxRepetitions - $data.currentRepetition), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","value","_hoisted_4","_hoisted_5","_hoisted_6","disabled","selected","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","_ctx","$t","_hoisted_3","id","$data","selectedDifficulty","$event","_hoisted_8","selectedLanguage","_hoisted_9","_hoisted_10","_createCommentVNode","$options","filteredSubjects","length","_hoisted_11","_hoisted_12","selectedSubject","_hoisted_13","_Fragment","_renderList","subject","key","title","_hoisted_14","_hoisted_15","onClick","_cache","args","createSubject","updateSubject","deleteSubject","_hoisted_16","startDictation","isDictationStarted","_hoisted_17","currentText","userInput","checkAnswer","speakText","timeRemaining","maxRepetitions","currentRepetition"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import VueSpeech from \"vue-speech\";\n<template>\n  <div class=\"test-dictation\">\n    <h1>Test de dictée</h1>\n    <h1>{{ $t(\"welcome\") }}</h1>\n    <div>\n      <label for=\"difficulty\">Niveau de difficulté :</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"facile\">Facile</option>\n        <option value=\"moyen\">Moyen</option>\n        <option value=\"difficile\">Difficile</option>\n      </select>\n    </div>\n\n    <div>\n  <label for=\"language\">Langue :</label>\n  <select id=\"language\" v-model=\"selectedLanguage\">\n    <option value=\"en-US\">English</option>\n    <option value=\"fr-FR\">Français</option>\n    <!-- Ajoutez d'autres options pour les autres langues si nécessaire -->\n  </select>\n</div>\n\n    <div v-if=\"filteredSubjects.length > 0\">\n    <label for=\"subject\">Sujet :</label>\n    <select id=\"subject\" v-model=\"selectedSubject\">\n     <option value=\"\" disabled selected>Sélectionnez un sujet</option>\n     <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n    </select>\n\n  <div class=\"subject-actions\">\n    <button @click=\"createSubject\">Nouveau sujet</button>\n    <button @click=\"updateSubject\">Mettre à jour</button>\n    <button @click=\"deleteSubject\">Supprimer</button>\n  </div>\n</div>\n\n    <div v-if=\"selectedSubject\">\n    <h2>{{ selectedSubject.title }}</h2>\n    <button @click=\"startDictation\">Commencer la dictée</button>\n\n    <div v-if=\"isDictationStarted\">\n      <p>{{ currentText }}</p>\n      <textarea v-model=\"userInput\"></textarea>\n      <button @click=\"checkAnswer\">Vérifier</button>\n      <button @click=\"speakText\">Lire le texte</button>\n      <div>\n       <p>Temps restant : {{ timeRemaining }}s</p>\n      </div>\n\n      <div>\n        <p>Répétitions restantes : {{ maxRepetitions - currentRepetition }}</p>\n      </div>\n    </div>\n\n  </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  data() {\n  return {\n\n    selectedLanguage: 'fr-FR', // Remplacez 'fr-FR' par la langue de votre choix\n    // ... autres propriétés de données,\n    maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n    currentRepetition: 1,\n    timer: null,\n    timeLimit: 60, // Temps limite en secondes\n    timeRemaining: 0,\n\n\n    subjects: [\n      {\n        title: \"Sujet 1\",\n        difficulty: \"facile\",\n        text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe.\"\n      },\n      {\n        title: \"Sujet 2\",\n        difficulty: \"moyen\",\n        text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n      },\n      {\n        title: \"Sujet 3\",\n        difficulty: \"difficile\",\n        text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n      }\n    ],\n    selectedDifficulty: \"\",\n    selectedSubject: null,\n    isDictationStarted: false,\n    currentText: \"\",\n    userInput: \"\"\n  };\n},\n\n\ncomputed: {\n  filteredSubjects() {\n    if (this.selectedDifficulty) {\n      return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n    } else {\n      return this.subjects;\n    }\n  }\n},\n\nspeakText(text) {\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.lang = this.selectedLanguage;\n  speechSynthesis.speak(utterance);\n},\n\n  methods: {\n\n     createSubject() {\n    const newSubject = {\n      title: \"Nouveau sujet\",\n      difficulty: \"\",\n      text: \"\"\n    }\n    this.subjects.push(newSubject);\n    this.selectedSubject = newSubject;\n  },\n\n  updateSubject() {\n    // Implémentez la logique pour mettre à jour le sujet sélectionné\n  },\n\n  deleteSubject() {\n    // Implémentez la logique pour supprimer le sujet sélectionné\n  },\n\n    startDictation() {\n       this.currentRepetition = 1;\n      this.timeRemaining = this.timeLimit;\n    this.timer = setInterval(() => {\n      if (this.timeRemaining > 0) {\n        this.timeRemaining--;\n      } else {\n        clearInterval(this.timer);\n        this.checkAnswer();\n      }\n    }, 1000)\n      this.isDictationStarted = true;\n      this.currentText = this.selectedSubject.text;\n    },\n\n    speakText() {\n        if (!this.isSpeaking) {\n        this.isSpeaking = true;\n        const textToSpeak = this.selectedSubject.text;\n        this.$speech\n          .speak({\n           text: textToSpeak,\n           onEnd: () => {\n          this.isSpeaking = false;\n        }\n      });\n  }\n},\n\n\n    checkAnswer() {\n      const userAnswer = this.userInput.trim();\n      const expectedAnswer = this.selectedSubject.text.trim();\n\n      if (userAnswer === expectedAnswer) {\n        alert(\"Bonne réponse !\");\n      } else {\n        alert(\"Mauvaise réponse. Réessayez !\");\n      }\n      if (userAnswer === expectedAnswer) {\n      // ...\n      if (this.currentRepetition < this.maxRepetitions) {\n        this.currentRepetition++;\n        this.isDictationStarted = true;\n      } else {\n        // ...\n      }\n    }\n\n      // Réinitialiser les valeurs\n      this.isDictationStarted = false;\n      this.currentText = \"\";\n      this.userInput = \"\";\n    }\n  }\n}\n\n\n</script>\n<style scoped>\n.test-dictation {\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nh1, h2 {\n  text-align: center;\n}\n\nselect, button {\n  margin-bottom: 10px;\n}\n\ntextarea {\n  width: 100%;\n  height: 100px;\n  margin-bottom: 10px;\n}\n\n/* ... */\n.timer {\n  text-align: center;\n}\n\n.repetitions {\n  text-align: center;\n}\n</style>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}