{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"test-dictation\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, [/*#__PURE__*/_createElementVNode(\"span\", null, \"Dicté en ligne\")], -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"difficulty\"\n}, \"Niveau de difficulté :\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"facile\"\n}, \"Facile\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"moyen\"\n}, \"Moyen\", -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"difficile\"\n}, \"Difficile\", -1 /* HOISTED */);\nconst _hoisted_8 = [_hoisted_5, _hoisted_6, _hoisted_7];\nconst _hoisted_9 = {\n  class: \"container\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"language\"\n}, \"Langue :\", -1 /* HOISTED */);\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"en-US\"\n}, \"English\", -1 /* HOISTED */);\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"fr-FR\"\n}, \"Français\", -1 /* HOISTED */);\nconst _hoisted_13 = {\n  key: 0,\n  class: \"container\"\n};\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"subject\"\n}, \"Sujet :\", -1 /* HOISTED */);\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\",\n  selected: \"\"\n}, \"Sélectionnez un sujet\", -1 /* HOISTED */);\nconst _hoisted_16 = [\"value\"];\nconst _hoisted_17 = {\n  class: \"subject-actions\"\n};\nconst _hoisted_18 = {\n  key: 1\n};\nconst _hoisted_19 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Nouveau sujet\", -1 /* HOISTED */);\nconst _hoisted_20 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"new-subject-title\"\n}, \"Titre :\", -1 /* HOISTED */);\nconst _hoisted_21 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"new-subject-text\"\n}, \"Texte :\", -1 /* HOISTED */);\nconst _hoisted_22 = {\n  key: 2\n};\nconst _hoisted_23 = {\n  key: 0\n};\nconst _hoisted_24 = {\n  for: \"repetitionsEnabled\"\n};\nconst _hoisted_25 = [\"onUpdate:modelValue\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"h1\", null, _toDisplayString(_ctx.$t(\"BONJOUR ET BIENVENUE\")), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _withDirectives(_createElementVNode(\"select\", {\n    id: \"difficulty\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedDifficulty = $event)\n  }, _hoisted_8, 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedDifficulty]])]), _createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _withDirectives(_createElementVNode(\"select\", {\n    id: \"language\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedLanguage = $event)\n  }, [_hoisted_11, _hoisted_12, _createCommentVNode(\" Ajoutez d'autres options pour les autres langues si nécessaire \")], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedLanguage]])]), _ctx.filteredSubjects.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_hoisted_14, _withDirectives(_createElementVNode(\"select\", {\n    id: \"subject\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectedSubject = $event)\n  }, [_hoisted_15, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredSubjects, subject => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: subject.title,\n      value: subject\n    }, _toDisplayString(subject.title), 9 /* TEXT, PROPS */, _hoisted_16);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedSubject]])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.createSubject && _ctx.createSubject(...args))\n  }, \"Nouveau sujet\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => _ctx.updateSubject && _ctx.updateSubject(...args))\n  }, \"Mettre à jour\"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.deleteSubject && _ctx.deleteSubject(...args))\n  }, \"Supprimer\")]), _ctx.isCreatingNewSubject ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_hoisted_19, _hoisted_20, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"new-subject-title\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.newSubject.title = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.newSubject.title]]), _hoisted_21, _withDirectives(_createElementVNode(\"textarea\", {\n    id: \"new-subject-text\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.newSubject.text = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.newSubject.text]]), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => _ctx.saveNewSubject && _ctx.saveNewSubject(...args))\n  }, \"Enregistrer\"), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => _ctx.cancelNewSubject && _ctx.cancelNewSubject(...args))\n  }, \"Annuler\")])) : _createCommentVNode(\"v-if\", true), _ctx.selectedSubject ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_createElementVNode(\"h2\", null, _toDisplayString(_ctx.selectedSubject.title), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = (...args) => _ctx.startDictation && _ctx.startDictation(...args))\n  }, \"Commencer la dictée\"), _ctx.isDictationStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.currentText), 1 /* TEXT */), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => _ctx.userInput = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = (...args) => _ctx.checkAnswer && _ctx.checkAnswer(...args))\n  }, \"Vérifier\"), _createElementVNode(\"button\", {\n    onClick: _cache[13] || (_cache[13] = $event => _ctx.speakText(_ctx.selectedSubject.text))\n  }, \"Lire le texte\"), _createElementVNode(\"label\", _hoisted_24, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"repetitionsEnabled\",\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[14] || (_cache[14] = $event => _ctx.repetitionsEnabled = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, _ctx.repetitionsEnabled]]), _createTextVNode(\" Répéter les phrases \")]), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Temps restant : \" + _toDisplayString(_ctx.timeRemaining) + \"s\", 1 /* TEXT */)]), _createElementVNode(\"h2\", null, _toDisplayString(_ctx.selectedSubject.title), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[15] || (_cache[15] = (...args) => _ctx.startDictation && _ctx.startDictation(...args))\n  }, _toDisplayString(_ctx.$t(\"Reprendre\")), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedSubject.phrases, phrase => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: phrase.text\n    }, [_createElementVNode(\"p\", null, _toDisplayString(phrase.text), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      \"onUpdate:modelValue\": $event => phrase.repetitions = $event,\n      min: \"1\"\n    }, null, 8 /* PROPS */, _hoisted_25), [[_vModelText, phrase.repetitions]])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[16] || (_cache[16] = (...args) => _ctx.startGeneralRepeat && _ctx.startGeneralRepeat(...args))\n  }, _toDisplayString(_ctx.$t(\"RépétitionGénéral\")), 1 /* TEXT */), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Répétitions restantes : \" + _toDisplayString(_ctx.maxRepetitions - _ctx.currentRepetition), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","value","_hoisted_5","_hoisted_6","_hoisted_7","disabled","selected","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","_ctx","$t","_hoisted_3","_hoisted_4","id","selectedDifficulty","$event","_hoisted_9","_hoisted_10","selectedLanguage","_hoisted_11","_hoisted_12","_createCommentVNode","filteredSubjects","length","_hoisted_13","_hoisted_14","selectedSubject","_hoisted_15","_Fragment","_renderList","subject","key","title","_hoisted_16","_hoisted_17","onClick","_cache","args","createSubject","updateSubject","deleteSubject","isCreatingNewSubject","_hoisted_18","_hoisted_19","_hoisted_20","type","newSubject","_hoisted_21","text","saveNewSubject","cancelNewSubject","_hoisted_22","startDictation","isDictationStarted","_hoisted_23","currentText","userInput","checkAnswer","speakText","_hoisted_24","repetitionsEnabled","timeRemaining","phrases","phrase","repetitions","min","startGeneralRepeat","maxRepetitions","currentRepetition"],"sources":["C:\\Users\\Abel\\Desktop\\VUE\\Dicte\\test-dictee-app\\src\\components\\HelloWorld.vue"],"sourcesContent":["import { subjects } from \"@/data\";\n\n<template>\n  <div class=\"test-dictation\">\n\n    <h1><span>Dicté en ligne</span></h1>\n\n    <h1>{{ $t(\"BONJOUR ET BIENVENUE\") }}</h1>\n\n    <div class=\"container\">\n      <label for=\"difficulty\">Niveau de difficulté :</label>\n      <select id=\"difficulty\" v-model=\"selectedDifficulty\">\n        <option value=\"facile\">Facile</option>\n        <option value=\"moyen\">Moyen</option>\n        <option value=\"difficile\">Difficile</option>\n      </select>\n    </div>\n\n    <div class=\"container\">\n      <label for=\"language\">Langue :</label>\n      <select id=\"language\" v-model=\"selectedLanguage\">\n        <option value=\"en-US\">English</option>\n        <option value=\"fr-FR\">Français</option>\n        <!-- Ajoutez d'autres options pour les autres langues si nécessaire -->\n      </select>\n    </div>\n\n    <div v-if=\"filteredSubjects.length > 0\" class=\"container\">\n      <label for=\"subject\">Sujet :</label>\n      <select id=\"subject\" v-model=\"selectedSubject\">\n        <option value=\"\" disabled selected>Sélectionnez un sujet</option>\n        <option v-for=\"subject in filteredSubjects\" :key=\"subject.title\" :value=\"subject\">{{ subject.title }}</option>\n      </select>\n      </div>\n      <div class=\"subject-actions\">\n        <button @click=\"createSubject\">Nouveau sujet</button>\n        <button @click=\"updateSubject\">Mettre à jour</button>\n        <button @click=\"deleteSubject\">Supprimer</button>\n        \n      </div>\n    \n       <div v-if=\"isCreatingNewSubject\">\n        <h2>Nouveau sujet</h2>\n        <label for=\"new-subject-title\">Titre :</label>\n        <input type=\"text\" id=\"new-subject-title\" v-model=\"newSubject.title\">\n\n        <label for=\"new-subject-text\">Texte :</label>\n        <textarea id=\"new-subject-text\" v-model=\"newSubject.text\"></textarea>\n\n        <button @click=\"saveNewSubject\">Enregistrer</button>\n        <button @click=\"cancelNewSubject\">Annuler</button>\n       </div>\n\n    <div v-if=\"selectedSubject\">\n      <h2>{{ selectedSubject.title }}</h2>\n      <button @click=\"startDictation\">Commencer la dictée</button>\n\n      <div v-if=\"isDictationStarted\">\n        <p>{{ currentText }}</p>\n        <textarea v-model=\"userInput\"></textarea>\n        <button @click=\"checkAnswer\">Vérifier</button>\n        <button @click=\"speakText(selectedSubject.text)\">Lire le texte</button>\n\n        <label for=\"repetitionsEnabled\">\n          <input\n            id=\"repetitionsEnabled\"\n            type=\"checkbox\"\n            v-model=\"repetitionsEnabled\"\n          >\n          Répéter les phrases\n        </label>\n\n        <div>\n          <p>Temps restant : {{ timeRemaining }}s</p>\n        </div>\n        \n        <h2>{{ selectedSubject.title }}</h2>\n        <button @click=\"startDictation\">{{ $t(\"Reprendre\") }}</button>\n        <div v-for=\"phrase in selectedSubject.phrases\" :key=\"phrase.text\">\n           <p>{{ phrase.text }}</p>\n           <input type=\"number\" v-model=\"phrase.repetitions\" min=\"1\">\n        </div>\n        <button @click=\"startGeneralRepeat\">{{ $t(\"RépétitionGénéral\") }}</button>\n\n        <div>\n          <p>Répétitions restantes : {{ maxRepetitions - currentRepetition }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n\n  data() {\n\n    return {\n      selectedLanguage: 'fr-FR', // Remplacez 'fr-FR' par la langue de votre choix\n      maxRepetitions: 3, // Nombre maximal de répétitions autorisées\n      currentRepetition: 1,\n      timer: null,\n      timeLimit: 60, // Temps limite en secondes\n      timeRemaining: 0,\n      repetitionsEnabled: false,\n      isCreatingNewSubject: false,\n      newSubject: {\n      title: \"\",\n      text: \"\",\n    },\n\n      subjects: [\n        {\n          title: \"Sujet 1\",\n          difficulty: \"facile\",\n          text: \"Le test de dictée est un excellent moyen d'améliorer ses compétences en orthographe. Ainsi il le faut vraiment pour un language meilleur.\"\n        },\n\n        {\n          title: \"Sujet 2\",\n          difficulty: \"moyen\",\n          text: \"La dictée est un exercice classique souvent utilisé dans les écoles pour évaluer les capacités des élèves.\"\n        },\n\n        {\n          title: \"Sujet 3\",\n          difficulty: \"difficile\",\n          text: \"La vitesse de lecture et la précision sont des aspects importants lors d'un test de dictée.\"\n        },\n      ],\n        selectedDifficulty: \"\",\n        selectedSubject: null,\n        isDictationStarted: false,\n        currentText: \"\",\n        userInput: \"\"\n    };\n  },\n\n    computed: {\n        filteredSubjects() {\n          if (this.selectedDifficulty) {\n          return this.subjects.filter(subject => subject.difficulty === this.selectedDifficulty);\n          } \n          else {\n            return this.subjects;\n          }\n        }\n      },\n\n    methods: {\n        const fs = require('fs');\n\ncreateSubject() {\n  const newSubject = {\n    id: generateId(),\n    title: \"Nouveau sujet\",\n    difficulty: \"\",\n    text: \"\"\n  };\n  this.subjects.push(newSubject);\n  this.selectedSubject = newSubject;\n\n  fs.writeFile('subjects.json', JSON.stringify(this.subjects), (err) => {\n    if (err) {\n      console.error('Erreur lors de l\\'écriture du fichier JSON :', err);\n    } else {\n      console.log('Sujets enregistrés dans le fichier JSON.');\n    }\n  });\n}\n\n\n        updateSubject() {\n             // Implémentez la logique pour mettre à jour le sujet sélectionné\n        },\n        deleteSubject() {\n             // Implémentez la logique pour supprimer le sujet sélectionné\n        },\n\n        cancelNewSubject() {\n          this.isCreatingNewSubject = false;\n          this.newSubject = null;\n        },\n\n         saveNewSubject() {\n    // Génère un ID et un numéro pour le nouveau sujet\n    const newId = this.subjects.length > 0 ? this.subjects[this.subjects.length - 1].id + 1 : 1;\n    const newNumber = this.subjects.length + 1;\n\n    // Crée le nouvel objet sujet\n    const newSubject = {\n      id: newId,\n      number: newNumber,\n      title: this.newSubject.title,\n      difficulty: \"\", // Définir la difficulté selon les besoins\n      text: this.newSubject.text\n    };\n\n    // Ajoute le sujet au tableau\n    this.subjects.push(newSubject);\n\n    // Réinitialise les valeurs pour le prochain nouveau sujet\n    this.newSubject.title = \"\";\n    this.newSubject.text = \"\";\n    \n    // Sélectionne le nouveau sujet créé\n    this.selectedSubject = newSubject;\n\n    // Désactive le mode de création de nouveau sujet\n    this.isCreatingNewSubject = false;\n  },\n\n\n      startDictation() {\n          this.currentRepetition = 1;\n          this.timeRemaining = this.timeLimit;\n          this.timer = setInterval(() => {\n            if (this.timeRemaining > 0) {\n              this.timeRemaining--;\n            } else {\n              clearInterval(this.timer);\n              this.checkAnswer();\n            }\n          }, 1000);\n          this.isDictationStarted = true;\n          this.currentText = this.selectedSubject.text; // Modifier ici pour utiliser la variable correcte\n          this.speakText(this.selectedSubject.text, this.selectedSubject.repetitions, this.repetitionsEnabled); // Modifier ici pour utiliser la variable correcte\n      },\n\n      speakText(text, repetitions, repetitionsEnabled) {\n          const sentences = text.split('.'); // Diviser le texte en phrases en utilisant le point comme séparateur\n          let currentIndex = 0;\n          const speakSentence = () => {\n            const sentence = sentences[currentIndex].trim();\n            const utterance = new SpeechSynthesisUtterance(sentence);\n            utterance.lang = this.selectedLanguage;\n          utterance.onend = () => {\n            if (repetitionsEnabled && repetitions > 1) {\n              repetitions--;\n              this.speakText(text, repetitions - 1, repetitionsEnabled);\n            } else if (currentIndex === sentences.length - 1) {\n              this.speakGeneralRepeat();\n            } else {\n              currentIndex++;\n              speakSentence();\n            }\n          };\n          speechSynthesis.speak(utterance);\n        };\n          speakSentence();\n      },\n\n      speakGeneralRepeat() {\n        const fullText = this.selectedSubject.phrases.map(phrase => phrase.text).join('. ');\n        const repetitions = this.selectedSubject.phrases.reduce((total, phrase) => total + phrase.repetitions, 0);\n\n        this.speakText(fullText, repetitions);\n      },\n\n      checkAnswer() {\n          const userAnswer = this.userInput.trim();\n          const expectedAnswer = this.selectedSubject.text.trim();\n            if (userAnswer === expectedAnswer) {\n              alert(\"Bonne réponse !\");\n            } else {\n              alert(\"Mauvaise réponse. Réessayez !\");\n            }\n\n            if (this.currentRepetition < this.maxRepetitions) {\n              this.currentRepetition++;\n              this.isDictationStarted = true;\n            } else {\n              // ...\n            }\n            // Réinitialiser les valeurs\n            this.isDictationStarted = false;\n            this.currentText = \"\";\n            this.userInput = \"\";\n          }\n        }\n  };\n</script>\n\n<style>\n  /* Importer votre fichier CSS externe */\n  @import './hello-world.css';\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}